
Black_Pill_boot_flash_to_uC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004208  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080043a8  080043a8  000053a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a4  080044a4  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  080044a4  080044a4  000054a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044ac  080044ac  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044ac  080044ac  000054ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044b0  080044b0  000054b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080044b4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000070  08004524  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08004524  00006370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007863  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cdb  00000000  00000000  0000d903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0000f5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000669  00000000  00000000  0000fe88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c5e  00000000  00000000  000104f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0de  00000000  00000000  0002714f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088571  00000000  00000000  0003122d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b979e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e8  00000000  00000000  000b97e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000bc1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004390 	.word	0x08004390

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004390 	.word	0x08004390

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	2b00      	cmp	r3, #0
 8000586:	d013      	beq.n	80005b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800058c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000590:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00b      	beq.n	80005b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000598:	e000      	b.n	800059c <ITM_SendChar+0x2c>
    {
      __NOP();
 800059a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f9      	beq.n	800059a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005a6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80005be:	b580      	push	{r7, lr}
 80005c0:	b082      	sub	sp, #8
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ffd1 	bl	8000570 <ITM_SendChar>
	return ch;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fced 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f89d 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f92f 	bl	8000848 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005ea:	f000 f8f7 	bl	80007dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("Bootloader begin\n");														// Начало бутлодера, включаем диод
 80005ee:	483f      	ldr	r0, [pc, #252]	@ (80006ec <main+0x114>)
 80005f0:	f003 f836 	bl	8003660 <puts>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005fa:	483d      	ldr	r0, [pc, #244]	@ (80006f0 <main+0x118>)
 80005fc:	f001 fbf8 	bl	8001df0 <HAL_GPIO_WritePin>

  while(Check_BUSY_bit()){															// Проверка что внешняя флеш не занята никаким процессом
 8000600:	e005      	b.n	800060e <main+0x36>
	  printf("BUSY \n");
 8000602:	483c      	ldr	r0, [pc, #240]	@ (80006f4 <main+0x11c>)
 8000604:	f003 f82c 	bl	8003660 <puts>
	  HAL_Delay(50);
 8000608:	2032      	movs	r0, #50	@ 0x32
 800060a:	f000 fd7f 	bl	800110c <HAL_Delay>
  while(Check_BUSY_bit()){															// Проверка что внешняя флеш не занята никаким процессом
 800060e:	f000 f991 	bl	8000934 <Check_BUSY_bit>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1f4      	bne.n	8000602 <main+0x2a>
  }

  firmware_size = Find_end_of_firmware();
 8000618:	f000 f9f2 	bl	8000a00 <Find_end_of_firmware>
 800061c:	4603      	mov	r3, r0
 800061e:	4a36      	ldr	r2, [pc, #216]	@ (80006f8 <main+0x120>)
 8000620:	6013      	str	r3, [r2, #0]
  if(firmware_size == UINT32_MAX) printf("Error! Couldn'n find end of firmware\n");
 8000622:	4b35      	ldr	r3, [pc, #212]	@ (80006f8 <main+0x120>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800062a:	d103      	bne.n	8000634 <main+0x5c>
 800062c:	4833      	ldr	r0, [pc, #204]	@ (80006fc <main+0x124>)
 800062e:	f003 f817 	bl	8003660 <puts>
 8000632:	e005      	b.n	8000640 <main+0x68>
  else printf("Programm size %" PRId32 " \n", firmware_size);
 8000634:	4b30      	ldr	r3, [pc, #192]	@ (80006f8 <main+0x120>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	4831      	ldr	r0, [pc, #196]	@ (8000700 <main+0x128>)
 800063c:	f002 ffa0 	bl	8003580 <iprintf>

  if(!HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin)) {
 8000640:	2180      	movs	r1, #128	@ 0x80
 8000642:	4830      	ldr	r0, [pc, #192]	@ (8000704 <main+0x12c>)
 8000644:	f001 fbbc 	bl	8001dc0 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d105      	bne.n	800065a <main+0x82>
	  printf("Start erasing MCU \n");
 800064e:	482e      	ldr	r0, [pc, #184]	@ (8000708 <main+0x130>)
 8000650:	f003 f806 	bl	8003660 <puts>
	  Erase_MCU();
 8000654:	f000 fa50 	bl	8000af8 <Erase_MCU>
 8000658:	e025      	b.n	80006a6 <main+0xce>
  } else {
	  printf("Start writing MCU \n");
 800065a:	482c      	ldr	r0, [pc, #176]	@ (800070c <main+0x134>)
 800065c:	f003 f800 	bl	8003660 <puts>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000666:	4822      	ldr	r0, [pc, #136]	@ (80006f0 <main+0x118>)
 8000668:	f001 fbc2 	bl	8001df0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800066c:	2064      	movs	r0, #100	@ 0x64
 800066e:	f000 fd4d 	bl	800110c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000678:	481d      	ldr	r0, [pc, #116]	@ (80006f0 <main+0x118>)
 800067a:	f001 fbb9 	bl	8001df0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800067e:	2064      	movs	r0, #100	@ 0x64
 8000680:	f000 fd44 	bl	800110c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800068a:	4819      	ldr	r0, [pc, #100]	@ (80006f0 <main+0x118>)
 800068c:	f001 fbb0 	bl	8001df0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000690:	2064      	movs	r0, #100	@ 0x64
 8000692:	f000 fd3b 	bl	800110c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800069c:	4814      	ldr	r0, [pc, #80]	@ (80006f0 <main+0x118>)
 800069e:	f001 fba7 	bl	8001df0 <HAL_GPIO_WritePin>

	  Write_MCU();
 80006a2:	f000 fa49 	bl	8000b38 <Write_MCU>
  }



  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);		// Выключаем диод. Бутлодер кончился, переходим на основную прошивку
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006ac:	4810      	ldr	r0, [pc, #64]	@ (80006f0 <main+0x118>)
 80006ae:	f001 fb9f 	bl	8001df0 <HAL_GPIO_WritePin>
  printf("Bootloader end\n");
 80006b2:	4817      	ldr	r0, [pc, #92]	@ (8000710 <main+0x138>)
 80006b4:	f002 ffd4 	bl	8003660 <puts>

  uint32_t appJumpAddress;
  appJumpAddress = * ((volatile uint32_t*)(APP_START_ADDRESS + 4));
 80006b8:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <main+0x13c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	60fb      	str	r3, [r7, #12]

  HAL_SPI_DeInit(&hspi1);
 80006be:	4816      	ldr	r0, [pc, #88]	@ (8000718 <main+0x140>)
 80006c0:	f002 f92b 	bl	800291a <HAL_SPI_DeInit>
  HAL_RCC_DeInit();
 80006c4:	f001 ffd2 	bl	800266c <HAL_RCC_DeInit>
  HAL_DeInit();
 80006c8:	f000 fc9a 	bl	8001000 <HAL_DeInit>

  void(*GoToApp)(void);
  GoToApp = (void (*)(void)) appJumpAddress;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop

  __disable_irq();
  __set_MSP(*((volatile uint32_t*)APP_START_ADDRESS));
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <main+0x144>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f383 8808 	msr	MSP, r3
}
 80006e0:	bf00      	nop
  GoToApp();
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	4798      	blx	r3
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e6:	bf00      	nop
 80006e8:	e7fd      	b.n	80006e6 <main+0x10e>
 80006ea:	bf00      	nop
 80006ec:	080043a8 	.word	0x080043a8
 80006f0:	40020800 	.word	0x40020800
 80006f4:	080043bc 	.word	0x080043bc
 80006f8:	20000194 	.word	0x20000194
 80006fc:	080043c4 	.word	0x080043c4
 8000700:	080043ec 	.word	0x080043ec
 8000704:	40020400 	.word	0x40020400
 8000708:	08004400 	.word	0x08004400
 800070c:	08004414 	.word	0x08004414
 8000710:	08004428 	.word	0x08004428
 8000714:	0800c004 	.word	0x0800c004
 8000718:	200001a4 	.word	0x200001a4
 800071c:	0800c000 	.word	0x0800c000

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	@ 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f003 f876 	bl	8003820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <SystemClock_Config+0xb4>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <SystemClock_Config+0xb4>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	@ 0x40
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <SystemClock_Config+0xb4>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <SystemClock_Config+0xb8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1b      	ldr	r2, [pc, #108]	@ (80007d8 <SystemClock_Config+0xb8>)
 800076a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <SystemClock_Config+0xb8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000788:	2300      	movs	r3, #0
 800078a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4618      	mov	r0, r3
 8000792:	f001 fb47 	bl	8001e24 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800079c:	f000 fa6c 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	230f      	movs	r3, #15
 80007a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fdaa 	bl	8002314 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007c6:	f000 fa57 	bl	8000c78 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	@ 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e0:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_SPI1_Init+0x64>)
 80007e2:	4a18      	ldr	r2, [pc, #96]	@ (8000844 <MX_SPI1_Init+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007e6:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_SPI1_Init+0x64>)
 80007e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ee:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_SPI1_Init+0x64>)
 8000808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800080c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_SPI1_Init+0x64>)
 8000810:	2238      	movs	r2, #56	@ 0x38
 8000812:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000814:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000820:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_SPI1_Init+0x64>)
 8000828:	220a      	movs	r2, #10
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800082c:	4804      	ldr	r0, [pc, #16]	@ (8000840 <MX_SPI1_Init+0x64>)
 800082e:	f001 ffeb 	bl	8002808 <HAL_SPI_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000838:	f000 fa1e 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200001a4 	.word	0x200001a4
 8000844:	40013000 	.word	0x40013000

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <MX_GPIO_Init+0xdc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a2f      	ldr	r2, [pc, #188]	@ (8000924 <MX_GPIO_Init+0xdc>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b2d      	ldr	r3, [pc, #180]	@ (8000924 <MX_GPIO_Init+0xdc>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <MX_GPIO_Init+0xdc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a28      	ldr	r2, [pc, #160]	@ (8000924 <MX_GPIO_Init+0xdc>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <MX_GPIO_Init+0xdc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <MX_GPIO_Init+0xdc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a21      	ldr	r2, [pc, #132]	@ (8000924 <MX_GPIO_Init+0xdc>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <MX_GPIO_Init+0xdc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b8:	481b      	ldr	r0, [pc, #108]	@ (8000928 <MX_GPIO_Init+0xe0>)
 80008ba:	f001 fa99 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SPI_GPIO_Port, CS_SPI_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2110      	movs	r1, #16
 80008c2:	481a      	ldr	r0, [pc, #104]	@ (800092c <MX_GPIO_Init+0xe4>)
 80008c4:	f001 fa94 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_LED_Pin */
  GPIO_InitStruct.Pin = Blue_LED_Pin;
 80008c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Blue_LED_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	4811      	ldr	r0, [pc, #68]	@ (8000928 <MX_GPIO_Init+0xe0>)
 80008e2:	f001 f805 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SPI_Pin */
  GPIO_InitStruct.Pin = CS_SPI_Pin;
 80008e6:	2310      	movs	r3, #16
 80008e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_SPI_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	480b      	ldr	r0, [pc, #44]	@ (800092c <MX_GPIO_Init+0xe4>)
 80008fe:	f000 fff7 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000902:	2380      	movs	r3, #128	@ 0x80
 8000904:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4619      	mov	r1, r3
 8000914:	4806      	ldr	r0, [pc, #24]	@ (8000930 <MX_GPIO_Init+0xe8>)
 8000916:	f000 ffeb 	bl	80018f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091a:	bf00      	nop
 800091c:	3720      	adds	r7, #32
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40020800 	.word	0x40020800
 800092c:	40020000 	.word	0x40020000
 8000930:	40020400 	.word	0x40020400

08000934 <Check_BUSY_bit>:

/* USER CODE BEGIN 4 */

int Check_BUSY_bit (void){
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_SPI_GPIO_Port, CS_SPI_Pin, GPIO_PIN_RESET);						// read status register
 8000938:	2200      	movs	r2, #0
 800093a:	2110      	movs	r1, #16
 800093c:	480d      	ldr	r0, [pc, #52]	@ (8000974 <Check_BUSY_bit+0x40>)
 800093e:	f001 fa57 	bl	8001df0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Read_Status_Register_cmd, sizeof(Read_Status_Register_cmd), 1000);
 8000942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000946:	2201      	movs	r2, #1
 8000948:	490b      	ldr	r1, [pc, #44]	@ (8000978 <Check_BUSY_bit+0x44>)
 800094a:	480c      	ldr	r0, [pc, #48]	@ (800097c <Check_BUSY_bit+0x48>)
 800094c:	f002 f80d 	bl	800296a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &RX_Data_1, sizeof(RX_Data_1), 1000);
 8000950:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000954:	2201      	movs	r2, #1
 8000956:	490a      	ldr	r1, [pc, #40]	@ (8000980 <Check_BUSY_bit+0x4c>)
 8000958:	4808      	ldr	r0, [pc, #32]	@ (800097c <Check_BUSY_bit+0x48>)
 800095a:	f002 f94a 	bl	8002bf2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CS_SPI_GPIO_Port, CS_SPI_Pin, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2110      	movs	r1, #16
 8000962:	4804      	ldr	r0, [pc, #16]	@ (8000974 <Check_BUSY_bit+0x40>)
 8000964:	f001 fa44 	bl	8001df0 <HAL_GPIO_WritePin>
	//HAL_Delay(50);

	return (RX_Data_1 & 1);
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <Check_BUSY_bit+0x4c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	f003 0301 	and.w	r3, r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40020000 	.word	0x40020000
 8000978:	20000000 	.word	0x20000000
 800097c:	200001a4 	.word	0x200001a4
 8000980:	2000008c 	.word	0x2000008c

08000984 <Read_Data>:

void Read_Data(uint32_t addr){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	TX_Read_Data [0] = Read_Data_cmd;
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <Read_Data+0x68>)
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <Read_Data+0x6c>)
 8000992:	701a      	strb	r2, [r3, #0]
	TX_Read_Data [1] = (uint8_t)(addr >> 16) & 0xFF;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	0c1b      	lsrs	r3, r3, #16
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <Read_Data+0x6c>)
 800099c:	705a      	strb	r2, [r3, #1]
	TX_Read_Data [2] = (uint8_t)(addr >> 8) & 0xFF;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <Read_Data+0x6c>)
 80009a6:	709a      	strb	r2, [r3, #2]
	TX_Read_Data [3] = (uint8_t)(addr & 0xFF);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <Read_Data+0x6c>)
 80009ae:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(CS_SPI_GPIO_Port, CS_SPI_Pin, GPIO_PIN_RESET);						// read first page
 80009b0:	2200      	movs	r2, #0
 80009b2:	2110      	movs	r1, #16
 80009b4:	480f      	ldr	r0, [pc, #60]	@ (80009f4 <Read_Data+0x70>)
 80009b6:	f001 fa1b 	bl	8001df0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_Read_Data, sizeof(TX_Read_Data), 1000);
 80009ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009be:	2204      	movs	r2, #4
 80009c0:	490b      	ldr	r1, [pc, #44]	@ (80009f0 <Read_Data+0x6c>)
 80009c2:	480d      	ldr	r0, [pc, #52]	@ (80009f8 <Read_Data+0x74>)
 80009c4:	f001 ffd1 	bl	800296a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_Data_256, sizeof(RX_Data_256), 1000);
 80009c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009d0:	490a      	ldr	r1, [pc, #40]	@ (80009fc <Read_Data+0x78>)
 80009d2:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <Read_Data+0x74>)
 80009d4:	f002 f90d 	bl	8002bf2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CS_SPI_GPIO_Port, CS_SPI_Pin, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2110      	movs	r1, #16
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <Read_Data+0x70>)
 80009de:	f001 fa07 	bl	8001df0 <HAL_GPIO_WritePin>
	//HAL_Delay(30);
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000001 	.word	0x20000001
 80009f0:	20000190 	.word	0x20000190
 80009f4:	40020000 	.word	0x40020000
 80009f8:	200001a4 	.word	0x200001a4
 80009fc:	20000090 	.word	0x20000090

08000a00 <Find_end_of_firmware>:

uint32_t Find_end_of_firmware(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
	while(MAX_flash_addr > firmware_size) {								// Читаем и выводим постранично
 8000a06:	e059      	b.n	8000abc <Find_end_of_firmware+0xbc>
		Read_Data(firmware_size);
 8000a08:	4b34      	ldr	r3, [pc, #208]	@ (8000adc <Find_end_of_firmware+0xdc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ffb9 	bl	8000984 <Read_Data>

		printf("Page: %" PRId32 " \n", Pages_counter);					// Выводим в формате 16h побайтово по странице
 8000a12:	4b33      	ldr	r3, [pc, #204]	@ (8000ae0 <Find_end_of_firmware+0xe0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4619      	mov	r1, r3
 8000a18:	4832      	ldr	r0, [pc, #200]	@ (8000ae4 <Find_end_of_firmware+0xe4>)
 8000a1a:	f002 fdb1 	bl	8003580 <iprintf>
		for(int x = 0; x < 16; x++){
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	e03a      	b.n	8000a9a <Find_end_of_firmware+0x9a>
	  		for(int y = 0; y < 16; y++){				 					// Квадратом 16 на 16
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	e02b      	b.n	8000a82 <Find_end_of_firmware+0x82>
	  			printf("0x%02X ", RX_Data_256[y + x*16]);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	011a      	lsls	r2, r3, #4
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a2d      	ldr	r2, [pc, #180]	@ (8000ae8 <Find_end_of_firmware+0xe8>)
 8000a34:	5cd3      	ldrb	r3, [r2, r3]
 8000a36:	4619      	mov	r1, r3
 8000a38:	482c      	ldr	r0, [pc, #176]	@ (8000aec <Find_end_of_firmware+0xec>)
 8000a3a:	f002 fda1 	bl	8003580 <iprintf>
	  			if(RX_Data_256[y + x*16] == 0xFF) {							// Ищем конец файла строку 0xFF
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	011a      	lsls	r2, r3, #4
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a28      	ldr	r2, [pc, #160]	@ (8000ae8 <Find_end_of_firmware+0xe8>)
 8000a48:	5cd3      	ldrb	r3, [r2, r3]
 8000a4a:	2bff      	cmp	r3, #255	@ 0xff
 8000a4c:	d116      	bne.n	8000a7c <Find_end_of_firmware+0x7c>
	  				FF_counter++;
 8000a4e:	4b28      	ldr	r3, [pc, #160]	@ (8000af0 <Find_end_of_firmware+0xf0>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a26      	ldr	r2, [pc, #152]	@ (8000af0 <Find_end_of_firmware+0xf0>)
 8000a56:	6013      	str	r3, [r2, #0]

	  				if(FF_counter == 16) {
 8000a58:	4b25      	ldr	r3, [pc, #148]	@ (8000af0 <Find_end_of_firmware+0xf0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b10      	cmp	r3, #16
 8000a5e:	d10d      	bne.n	8000a7c <Find_end_of_firmware+0x7c>
	  					firmware_size = firmware_size + (x * 16);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	011b      	lsls	r3, r3, #4
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <Find_end_of_firmware+0xdc>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000adc <Find_end_of_firmware+0xdc>)
 8000a6e:	6013      	str	r3, [r2, #0]
	  					printf("\n");
 8000a70:	200a      	movs	r0, #10
 8000a72:	f002 fd97 	bl	80035a4 <putchar>
	  					return firmware_size;
 8000a76:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <Find_end_of_firmware+0xdc>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	e02a      	b.n	8000ad2 <Find_end_of_firmware+0xd2>
	  		for(int y = 0; y < 16; y++){				 					// Квадратом 16 на 16
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	ddd0      	ble.n	8000a2a <Find_end_of_firmware+0x2a>
	  				}
	  			}
	  	  }
	  	  FF_counter = 0;
 8000a88:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <Find_end_of_firmware+0xf0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
	  	  printf("\n");
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f002 fd88 	bl	80035a4 <putchar>
		for(int x = 0; x < 16; x++){
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3301      	adds	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	ddc1      	ble.n	8000a24 <Find_end_of_firmware+0x24>
	  	}
		printf("\n");
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f002 fd7f 	bl	80035a4 <putchar>
	  	firmware_size += 0x100;
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <Find_end_of_firmware+0xdc>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000aae:	4a0b      	ldr	r2, [pc, #44]	@ (8000adc <Find_end_of_firmware+0xdc>)
 8000ab0:	6013      	str	r3, [r2, #0]
	  	Pages_counter++;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <Find_end_of_firmware+0xe0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	4a09      	ldr	r2, [pc, #36]	@ (8000ae0 <Find_end_of_firmware+0xe0>)
 8000aba:	6013      	str	r3, [r2, #0]
	while(MAX_flash_addr > firmware_size) {								// Читаем и выводим постранично
 8000abc:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <Find_end_of_firmware+0xf4>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <Find_end_of_firmware+0xdc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d89f      	bhi.n	8000a08 <Find_end_of_firmware+0x8>
	  }
	printf("\n");
 8000ac8:	200a      	movs	r0, #10
 8000aca:	f002 fd6b 	bl	80035a4 <putchar>
    return UINT32_MAX;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000194 	.word	0x20000194
 8000ae0:	2000019c 	.word	0x2000019c
 8000ae4:	08004438 	.word	0x08004438
 8000ae8:	20000090 	.word	0x20000090
 8000aec:	08004444 	.word	0x08004444
 8000af0:	200001a0 	.word	0x200001a0
 8000af4:	20000004 	.word	0x20000004

08000af8 <Erase_MCU>:

void Erase_MCU (void){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000afe:	b672      	cpsid	i
}
 8000b00:	bf00      	nop
	__disable_irq();

	FLASH_EraseInitTypeDef eraseInitStruct;
	eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
	eraseInitStruct.Banks = FLASH_BANK_1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
	eraseInitStruct.Sector = FLASH_SECTOR_3;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	60fb      	str	r3, [r7, #12]
	eraseInitStruct.NbSectors = 1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
	eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000b12:	2302      	movs	r3, #2
 8000b14:	617b      	str	r3, [r7, #20]

	HAL_FLASH_Unlock();
 8000b16:	f000 fc57 	bl	80013c8 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&eraseInitStruct, &SectorError);
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4905      	ldr	r1, [pc, #20]	@ (8000b34 <Erase_MCU+0x3c>)
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 fdc4 	bl	80016ac <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000b24:	f000 fc72 	bl	800140c <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b28:	b662      	cpsie	i
}
 8000b2a:	bf00      	nop

	__enable_irq();
}
 8000b2c:	bf00      	nop
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000198 	.word	0x20000198

08000b38 <Write_MCU>:

void Write_MCU (void){
 8000b38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
	uint32_t buff_to_write = 0;					// Будем записывать словами по 32 бита
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
	uint32_t bytes_written = 0;					// Сколько байт записали во внутреннюю флеш
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop

	__disable_irq();
	HAL_FLASH_Unlock();
 8000b4c:	f000 fc3c 	bl	80013c8 <HAL_FLASH_Unlock>

	for(int x = 0; x < firmware_size; x += 256){
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	e03e      	b.n	8000bd4 <Write_MCU+0x9c>
		Read_Data(x);
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff13 	bl	8000984 <Read_Data>
		for(int y = 0; y < 256; y += 4) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	e02c      	b.n	8000bbe <Write_MCU+0x86>
			buff_to_write = (uint32_t) (RX_Data_256[y+3] << 24)|(RX_Data_256[y+2] << 16)|(RX_Data_256[y+1] << 8)|(RX_Data_256[y] << 0);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	3303      	adds	r3, #3
 8000b68:	4a40      	ldr	r2, [pc, #256]	@ (8000c6c <Write_MCU+0x134>)
 8000b6a:	5cd3      	ldrb	r3, [r2, r3]
 8000b6c:	061a      	lsls	r2, r3, #24
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	3302      	adds	r3, #2
 8000b72:	493e      	ldr	r1, [pc, #248]	@ (8000c6c <Write_MCU+0x134>)
 8000b74:	5ccb      	ldrb	r3, [r1, r3]
 8000b76:	041b      	lsls	r3, r3, #16
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	493b      	ldr	r1, [pc, #236]	@ (8000c6c <Write_MCU+0x134>)
 8000b80:	5ccb      	ldrb	r3, [r1, r3]
 8000b82:	021b      	lsls	r3, r3, #8
 8000b84:	4313      	orrs	r3, r2
 8000b86:	4939      	ldr	r1, [pc, #228]	@ (8000c6c <Write_MCU+0x134>)
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	440a      	add	r2, r1
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	607b      	str	r3, [r7, #4]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, APP_START_ADDRESS + (bytes_written), buff_to_write);
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000b98:	f501 4140 	add.w	r1, r1, #49152	@ 0xc000
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4698      	mov	r8, r3
 8000ba2:	4691      	mov	r9, r2
 8000ba4:	4642      	mov	r2, r8
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f000 fbb9 	bl	8001320 <HAL_FLASH_Program>
			bytes_written += 4;
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
			buff_to_write = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
		for(int y = 0; y < 256; y += 4) {
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3304      	adds	r3, #4
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2bff      	cmp	r3, #255	@ 0xff
 8000bc2:	ddcf      	ble.n	8000b64 <Write_MCU+0x2c>
		}
		printf("bytes_written %" PRId32 " \n", bytes_written);
 8000bc4:	6979      	ldr	r1, [r7, #20]
 8000bc6:	482a      	ldr	r0, [pc, #168]	@ (8000c70 <Write_MCU+0x138>)
 8000bc8:	f002 fcda 	bl	8003580 <iprintf>
	for(int x = 0; x < firmware_size; x += 256){
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <Write_MCU+0x13c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d3bb      	bcc.n	8000b56 <Write_MCU+0x1e>
	}
	if(firmware_size - bytes_written > 0) {
 8000bde:	4b25      	ldr	r3, [pc, #148]	@ (8000c74 <Write_MCU+0x13c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d038      	beq.n	8000c5a <Write_MCU+0x122>
		Read_Data(bytes_written);
 8000be8:	6978      	ldr	r0, [r7, #20]
 8000bea:	f7ff fecb 	bl	8000984 <Read_Data>
		for(int y = 0; y < (firmware_size % 256); y += 4) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	e02c      	b.n	8000c4e <Write_MCU+0x116>
			buff_to_write = (uint32_t) (RX_Data_256[y] << 0)|(RX_Data_256[y+1] << 8)|(RX_Data_256[y+2] << 16)|(RX_Data_256[y+3] << 24);
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c6c <Write_MCU+0x134>)
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	3301      	adds	r3, #1
 8000c02:	4a1a      	ldr	r2, [pc, #104]	@ (8000c6c <Write_MCU+0x134>)
 8000c04:	5cd3      	ldrb	r3, [r2, r3]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	ea41 0203 	orr.w	r2, r1, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	3302      	adds	r3, #2
 8000c10:	4916      	ldr	r1, [pc, #88]	@ (8000c6c <Write_MCU+0x134>)
 8000c12:	5ccb      	ldrb	r3, [r1, r3]
 8000c14:	041b      	lsls	r3, r3, #16
 8000c16:	431a      	orrs	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	3303      	adds	r3, #3
 8000c1c:	4913      	ldr	r1, [pc, #76]	@ (8000c6c <Write_MCU+0x134>)
 8000c1e:	5ccb      	ldrb	r3, [r1, r3]
 8000c20:	061b      	lsls	r3, r3, #24
 8000c22:	4313      	orrs	r3, r2
 8000c24:	607b      	str	r3, [r7, #4]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, APP_START_ADDRESS + (bytes_written), buff_to_write);
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000c2c:	f501 4140 	add.w	r1, r1, #49152	@ 0xc000
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	461c      	mov	r4, r3
 8000c36:	4615      	mov	r5, r2
 8000c38:	4622      	mov	r2, r4
 8000c3a:	462b      	mov	r3, r5
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f000 fb6f 	bl	8001320 <HAL_FLASH_Program>
			bytes_written += 4;
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3304      	adds	r3, #4
 8000c46:	617b      	str	r3, [r7, #20]
		for(int y = 0; y < (firmware_size % 256); y += 4) {
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3304      	adds	r3, #4
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <Write_MCU+0x13c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d8cc      	bhi.n	8000bf4 <Write_MCU+0xbc>
		}
	}

	HAL_FLASH_Lock();
 8000c5a:	f000 fbd7 	bl	800140c <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c5e:	b662      	cpsie	i
}
 8000c60:	bf00      	nop
	__enable_irq();
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c6c:	20000090 	.word	0x20000090
 8000c70:	0800444c 	.word	0x0800444c
 8000c74:	20000194 	.word	0x20000194

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <Error_Handler+0x8>

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c92:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	4a08      	ldr	r2, [pc, #32]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	@ 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a19      	ldr	r2, [pc, #100]	@ (8000d58 <HAL_SPI_MspInit+0x84>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d12b      	bne.n	8000d4e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a10      	ldr	r2, [pc, #64]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <HAL_SPI_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d2e:	23e0      	movs	r3, #224	@ 0xe0
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <HAL_SPI_MspInit+0x8c>)
 8000d4a:	f000 fdd1 	bl	80018f0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	@ 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40013000 	.word	0x40013000
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000

08000d64 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a08      	ldr	r2, [pc, #32]	@ (8000d94 <HAL_SPI_MspDeInit+0x30>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d109      	bne.n	8000d8a <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <HAL_SPI_MspDeInit+0x34>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <HAL_SPI_MspDeInit+0x34>)
 8000d7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d80:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8000d82:	21e0      	movs	r1, #224	@ 0xe0
 8000d84:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <HAL_SPI_MspDeInit+0x38>)
 8000d86:	f000 ff37 	bl	8001bf8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40013000 	.word	0x40013000
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <NMI_Handler+0x4>

08000da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <MemManage_Handler+0x4>

08000db8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df6:	f000 f969 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	60f8      	str	r0, [r7, #12]
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	e00a      	b.n	8000e26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e10:	f3af 8000 	nop.w
 8000e14:	4601      	mov	r1, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1c5a      	adds	r2, r3, #1
 8000e1a:	60ba      	str	r2, [r7, #8]
 8000e1c:	b2ca      	uxtb	r2, r1
 8000e1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	3301      	adds	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	dbf0      	blt.n	8000e10 <_read+0x12>
  }

  return len;
 8000e2e:	687b      	ldr	r3, [r7, #4]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	e009      	b.n	8000e5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	60ba      	str	r2, [r7, #8]
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fbb3 	bl	80005be <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	dbf1      	blt.n	8000e4a <_write+0x12>
  }
  return len;
 8000e66:	687b      	ldr	r3, [r7, #4]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_close>:

int _close(int file)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e98:	605a      	str	r2, [r3, #4]
  return 0;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <_isatty>:

int _isatty(int file)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eb0:	2301      	movs	r3, #1
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b085      	sub	sp, #20
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee0:	4a14      	ldr	r2, [pc, #80]	@ (8000f34 <_sbrk+0x5c>)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <_sbrk+0x60>)
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <_sbrk+0x64>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <_sbrk+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d207      	bcs.n	8000f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f08:	f002 fcd8 	bl	80038bc <__errno>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	220c      	movs	r2, #12
 8000f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	e009      	b.n	8000f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <_sbrk+0x64>)
 8000f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20020000 	.word	0x20020000
 8000f38:	00000400 	.word	0x00000400
 8000f3c:	200001fc 	.word	0x200001fc
 8000f40:	20000370 	.word	0x20000370

08000f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f6c:	f7ff ffea 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	@ (8000fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f96:	f002 fc97 	bl	80038c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff fb1d 	bl	80005d8 <main>
  bx  lr    
 8000f9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fac:	080044b4 	.word	0x080044b4
  ldr r2, =_sbss
 8000fb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fb4:	20000370 	.word	0x20000370

08000fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <HAL_Init+0x40>)
 8000fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <HAL_Init+0x40>)
 8000fd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	@ (8000ffc <HAL_Init+0x40>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 f967 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	200f      	movs	r0, #15
 8000fec:	f000 f83e 	bl	800106c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff fe48 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023c00 	.word	0x40023c00

08001000 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <HAL_DeInit+0x4c>)
 8001006:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <HAL_DeInit+0x50>)
 8001008:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <HAL_DeInit+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001010:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <HAL_DeInit+0x4c>)
 8001012:	4a10      	ldr	r2, [pc, #64]	@ (8001054 <HAL_DeInit+0x54>)
 8001014:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001016:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <HAL_DeInit+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <HAL_DeInit+0x4c>)
 800101e:	4a0e      	ldr	r2, [pc, #56]	@ (8001058 <HAL_DeInit+0x58>)
 8001020:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_DeInit+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <HAL_DeInit+0x4c>)
 800102a:	2280      	movs	r2, #128	@ 0x80
 800102c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800102e:	4b07      	ldr	r3, [pc, #28]	@ (800104c <HAL_DeInit+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <HAL_DeInit+0x4c>)
 8001036:	f04f 32ff 	mov.w	r2, #4294967295
 800103a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800103c:	4b03      	ldr	r3, [pc, #12]	@ (800104c <HAL_DeInit+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001042:	f000 f80b 	bl	800105c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	10e2c80f 	.word	0x10e2c80f
 8001054:	00177931 	.word	0x00177931
 8001058:	0060109f 	.word	0x0060109f

0800105c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <HAL_InitTick+0x54>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <HAL_InitTick+0x58>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f93b 	bl	8001306 <HAL_SYSTICK_Config>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00e      	b.n	80010b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d80a      	bhi.n	80010b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f000 f911 	bl	80012ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4a06      	ldr	r2, [pc, #24]	@ (80010c8 <HAL_InitTick+0x5c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000010 	.word	0x20000010
 80010c8:	2000000c 	.word	0x2000000c

080010cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	@ (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000010 	.word	0x20000010
 80010f0:	20000200 	.word	0x20000200

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000200 	.word	0x20000200

0800110c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff ffee 	bl	80010f4 <HAL_GetTick>
 8001118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d005      	beq.n	8001132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_Delay+0x44>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001132:	bf00      	nop
 8001134:	f7ff ffde 	bl	80010f4 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8f7      	bhi.n	8001134 <HAL_Delay+0x28>
  {
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000010 	.word	0x20000010

08001154 <__NVIC_SetPriorityGrouping>:
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_SetPriority>:
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	@ (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	@ (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	@ 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <SysTick_Config>:
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001284:	d301      	bcc.n	800128a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001286:	2301      	movs	r3, #1
 8001288:	e00f      	b.n	80012aa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128a:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <SysTick_Config+0x40>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001292:	210f      	movs	r1, #15
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f7ff ff8e 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800129c:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <SysTick_Config+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a2:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <SysTick_Config+0x40>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff47 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e0:	f7ff ff5c 	bl	800119c <__NVIC_GetPriorityGrouping>
 80012e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f7ff ff8e 	bl	800120c <NVIC_EncodePriority>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff5d 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffb0 	bl	8001274 <SysTick_Config>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001332:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <HAL_FLASH_Program+0xa0>)
 8001334:	7e1b      	ldrb	r3, [r3, #24]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_FLASH_Program+0x1e>
 800133a:	2302      	movs	r3, #2
 800133c:	e03b      	b.n	80013b6 <HAL_FLASH_Program+0x96>
 800133e:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <HAL_FLASH_Program+0xa0>)
 8001340:	2201      	movs	r2, #1
 8001342:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001344:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001348:	f000 f870 	bl	800142c <FLASH_WaitForLastOperation>
 800134c:	4603      	mov	r3, r0
 800134e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d12b      	bne.n	80013ae <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d105      	bne.n	8001368 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800135c:	783b      	ldrb	r3, [r7, #0]
 800135e:	4619      	mov	r1, r3
 8001360:	68b8      	ldr	r0, [r7, #8]
 8001362:	f000 f91b 	bl	800159c <FLASH_Program_Byte>
 8001366:	e016      	b.n	8001396 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d105      	bne.n	800137a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800136e:	883b      	ldrh	r3, [r7, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	68b8      	ldr	r0, [r7, #8]
 8001374:	f000 f8ee 	bl	8001554 <FLASH_Program_HalfWord>
 8001378:	e00d      	b.n	8001396 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d105      	bne.n	800138c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	4619      	mov	r1, r3
 8001384:	68b8      	ldr	r0, [r7, #8]
 8001386:	f000 f8c3 	bl	8001510 <FLASH_Program_Word>
 800138a:	e004      	b.n	8001396 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800138c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001390:	68b8      	ldr	r0, [r7, #8]
 8001392:	f000 f88b 	bl	80014ac <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001396:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800139a:	f000 f847 	bl	800142c <FLASH_WaitForLastOperation>
 800139e:	4603      	mov	r3, r0
 80013a0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80013a2:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <HAL_FLASH_Program+0xa4>)
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	4a07      	ldr	r2, [pc, #28]	@ (80013c4 <HAL_FLASH_Program+0xa4>)
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013ae:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <HAL_FLASH_Program+0xa0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	761a      	strb	r2, [r3, #24]

  return status;
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000204 	.word	0x20000204
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <HAL_FLASH_Unlock+0x38>)
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da0b      	bge.n	80013f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_FLASH_Unlock+0x38>)
 80013dc:	4a09      	ldr	r2, [pc, #36]	@ (8001404 <HAL_FLASH_Unlock+0x3c>)
 80013de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80013e0:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <HAL_FLASH_Unlock+0x38>)
 80013e2:	4a09      	ldr	r2, [pc, #36]	@ (8001408 <HAL_FLASH_Unlock+0x40>)
 80013e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_FLASH_Unlock+0x38>)
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da01      	bge.n	80013f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80013f2:	79fb      	ldrb	r3, [r7, #7]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40023c00 	.word	0x40023c00
 8001404:	45670123 	.word	0x45670123
 8001408:	cdef89ab 	.word	0xcdef89ab

0800140c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <HAL_FLASH_Lock+0x1c>)
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <HAL_FLASH_Lock+0x1c>)
 8001416:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800141a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	40023c00 	.word	0x40023c00

0800142c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <FLASH_WaitForLastOperation+0x78>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800143e:	f7ff fe59 	bl	80010f4 <HAL_GetTick>
 8001442:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001444:	e010      	b.n	8001468 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d00c      	beq.n	8001468 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <FLASH_WaitForLastOperation+0x38>
 8001454:	f7ff fe4e 	bl	80010f4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	429a      	cmp	r2, r3
 8001462:	d201      	bcs.n	8001468 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e019      	b.n	800149c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <FLASH_WaitForLastOperation+0x7c>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1e8      	bne.n	8001446 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <FLASH_WaitForLastOperation+0x7c>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <FLASH_WaitForLastOperation+0x7c>)
 8001482:	2201      	movs	r2, #1
 8001484:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <FLASH_WaitForLastOperation+0x7c>)
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001492:	f000 f8a5 	bl	80015e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0

}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000204 	.word	0x20000204
 80014a8:	40023c00 	.word	0x40023c00

080014ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014b8:	4b14      	ldr	r3, [pc, #80]	@ (800150c <FLASH_Program_DoubleWord+0x60>)
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	4a13      	ldr	r2, [pc, #76]	@ (800150c <FLASH_Program_DoubleWord+0x60>)
 80014be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <FLASH_Program_DoubleWord+0x60>)
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	4a10      	ldr	r2, [pc, #64]	@ (800150c <FLASH_Program_DoubleWord+0x60>)
 80014ca:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80014ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <FLASH_Program_DoubleWord+0x60>)
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	4a0d      	ldr	r2, [pc, #52]	@ (800150c <FLASH_Program_DoubleWord+0x60>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80014e2:	f3bf 8f6f 	isb	sy
}
 80014e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80014e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	000a      	movs	r2, r1
 80014f6:	2300      	movs	r3, #0
 80014f8:	68f9      	ldr	r1, [r7, #12]
 80014fa:	3104      	adds	r1, #4
 80014fc:	4613      	mov	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40023c00 	.word	0x40023c00

08001510 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800151a:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <FLASH_Program_Word+0x40>)
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	4a0c      	ldr	r2, [pc, #48]	@ (8001550 <FLASH_Program_Word+0x40>)
 8001520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001524:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <FLASH_Program_Word+0x40>)
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	4a09      	ldr	r2, [pc, #36]	@ (8001550 <FLASH_Program_Word+0x40>)
 800152c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001530:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001532:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <FLASH_Program_Word+0x40>)
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	4a06      	ldr	r2, [pc, #24]	@ (8001550 <FLASH_Program_Word+0x40>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	601a      	str	r2, [r3, #0]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	40023c00 	.word	0x40023c00

08001554 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001560:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <FLASH_Program_HalfWord+0x44>)
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	4a0c      	ldr	r2, [pc, #48]	@ (8001598 <FLASH_Program_HalfWord+0x44>)
 8001566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800156a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800156c:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <FLASH_Program_HalfWord+0x44>)
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	4a09      	ldr	r2, [pc, #36]	@ (8001598 <FLASH_Program_HalfWord+0x44>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001576:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001578:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <FLASH_Program_HalfWord+0x44>)
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	4a06      	ldr	r2, [pc, #24]	@ (8001598 <FLASH_Program_HalfWord+0x44>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	801a      	strh	r2, [r3, #0]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00

0800159c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <FLASH_Program_Byte+0x40>)
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	4a0b      	ldr	r2, [pc, #44]	@ (80015dc <FLASH_Program_Byte+0x40>)
 80015ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80015b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <FLASH_Program_Byte+0x40>)
 80015b6:	4a09      	ldr	r2, [pc, #36]	@ (80015dc <FLASH_Program_Byte+0x40>)
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015bc:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <FLASH_Program_Byte+0x40>)
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	4a06      	ldr	r2, [pc, #24]	@ (80015dc <FLASH_Program_Byte+0x40>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	701a      	strb	r2, [r3, #0]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40023c00 	.word	0x40023c00

080015e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80015e4:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <FLASH_SetErrorCode+0xc4>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80015f0:	4b2d      	ldr	r3, [pc, #180]	@ (80016a8 <FLASH_SetErrorCode+0xc8>)
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	f043 0310 	orr.w	r3, r3, #16
 80015f8:	4a2b      	ldr	r2, [pc, #172]	@ (80016a8 <FLASH_SetErrorCode+0xc8>)
 80015fa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80015fc:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <FLASH_SetErrorCode+0xc4>)
 80015fe:	2210      	movs	r2, #16
 8001600:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001602:	4b28      	ldr	r3, [pc, #160]	@ (80016a4 <FLASH_SetErrorCode+0xc4>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	2b00      	cmp	r3, #0
 800160c:	d008      	beq.n	8001620 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800160e:	4b26      	ldr	r3, [pc, #152]	@ (80016a8 <FLASH_SetErrorCode+0xc8>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	4a24      	ldr	r2, [pc, #144]	@ (80016a8 <FLASH_SetErrorCode+0xc8>)
 8001618:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800161a:	4b22      	ldr	r3, [pc, #136]	@ (80016a4 <FLASH_SetErrorCode+0xc4>)
 800161c:	2220      	movs	r2, #32
 800161e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001620:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <FLASH_SetErrorCode+0xc4>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001628:	2b00      	cmp	r3, #0
 800162a:	d008      	beq.n	800163e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800162c:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <FLASH_SetErrorCode+0xc8>)
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	4a1c      	ldr	r2, [pc, #112]	@ (80016a8 <FLASH_SetErrorCode+0xc8>)
 8001636:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001638:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <FLASH_SetErrorCode+0xc4>)
 800163a:	2240      	movs	r2, #64	@ 0x40
 800163c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800163e:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <FLASH_SetErrorCode+0xc4>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001646:	2b00      	cmp	r3, #0
 8001648:	d008      	beq.n	800165c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <FLASH_SetErrorCode+0xc8>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	4a15      	ldr	r2, [pc, #84]	@ (80016a8 <FLASH_SetErrorCode+0xc8>)
 8001654:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001656:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <FLASH_SetErrorCode+0xc4>)
 8001658:	2280      	movs	r2, #128	@ 0x80
 800165a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <FLASH_SetErrorCode+0xc4>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001664:	2b00      	cmp	r3, #0
 8001666:	d009      	beq.n	800167c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <FLASH_SetErrorCode+0xc8>)
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	4a0d      	ldr	r2, [pc, #52]	@ (80016a8 <FLASH_SetErrorCode+0xc8>)
 8001672:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001674:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <FLASH_SetErrorCode+0xc4>)
 8001676:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800167a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800167c:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <FLASH_SetErrorCode+0xc4>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001688:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <FLASH_SetErrorCode+0xc8>)
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	f043 0320 	orr.w	r3, r3, #32
 8001690:	4a05      	ldr	r2, [pc, #20]	@ (80016a8 <FLASH_SetErrorCode+0xc8>)
 8001692:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001694:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <FLASH_SetErrorCode+0xc4>)
 8001696:	2202      	movs	r2, #2
 8001698:	60da      	str	r2, [r3, #12]
  }
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40023c00 	.word	0x40023c00
 80016a8:	20000204 	.word	0x20000204

080016ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016be:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <HAL_FLASHEx_Erase+0xd8>)
 80016c0:	7e1b      	ldrb	r3, [r3, #24]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_FLASHEx_Erase+0x1e>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e058      	b.n	800177c <HAL_FLASHEx_Erase+0xd0>
 80016ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001784 <HAL_FLASHEx_Erase+0xd8>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80016d4:	f7ff feaa 	bl	800142c <FLASH_WaitForLastOperation>
 80016d8:	4603      	mov	r3, r0
 80016da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d148      	bne.n	8001774 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d115      	bne.n	800171e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4619      	mov	r1, r3
 80016fe:	4610      	mov	r0, r2
 8001700:	f000 f844 	bl	800178c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001704:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001708:	f7ff fe90 	bl	800142c <FLASH_WaitForLastOperation>
 800170c:	4603      	mov	r3, r0
 800170e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001710:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_FLASHEx_Erase+0xdc>)
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	4a1c      	ldr	r2, [pc, #112]	@ (8001788 <HAL_FLASHEx_Erase+0xdc>)
 8001716:	f023 0304 	bic.w	r3, r3, #4
 800171a:	6113      	str	r3, [r2, #16]
 800171c:	e028      	b.n	8001770 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	e01c      	b.n	8001760 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	4619      	mov	r1, r3
 800172e:	68b8      	ldr	r0, [r7, #8]
 8001730:	f000 f850 	bl	80017d4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001734:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001738:	f7ff fe78 	bl	800142c <FLASH_WaitForLastOperation>
 800173c:	4603      	mov	r3, r0
 800173e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <HAL_FLASHEx_Erase+0xdc>)
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	4a10      	ldr	r2, [pc, #64]	@ (8001788 <HAL_FLASHEx_Erase+0xdc>)
 8001746:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800174a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	601a      	str	r2, [r3, #0]
          break;
 8001758:	e00a      	b.n	8001770 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	3301      	adds	r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4413      	add	r3, r2
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	429a      	cmp	r2, r3
 800176e:	d3da      	bcc.n	8001726 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001770:	f000 f878 	bl	8001864 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001774:	4b03      	ldr	r3, [pc, #12]	@ (8001784 <HAL_FLASHEx_Erase+0xd8>)
 8001776:	2200      	movs	r2, #0
 8001778:	761a      	strb	r2, [r3, #24]

  return status;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000204 	.word	0x20000204
 8001788:	40023c00 	.word	0x40023c00

0800178c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001798:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <FLASH_MassErase+0x44>)
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	4a0c      	ldr	r2, [pc, #48]	@ (80017d0 <FLASH_MassErase+0x44>)
 800179e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80017a4:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <FLASH_MassErase+0x44>)
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	4a09      	ldr	r2, [pc, #36]	@ (80017d0 <FLASH_MassErase+0x44>)
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80017b0:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <FLASH_MassErase+0x44>)
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	4313      	orrs	r3, r2
 80017ba:	4a05      	ldr	r2, [pc, #20]	@ (80017d0 <FLASH_MassErase+0x44>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c0:	6113      	str	r3, [r2, #16]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023c00 	.word	0x40023c00

080017d4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e010      	b.n	8001812 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d103      	bne.n	80017fe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80017f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e009      	b.n	8001812 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d103      	bne.n	800180c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	e002      	b.n	8001812 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800180c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001810:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <FLASH_Erase_Sector+0x8c>)
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <FLASH_Erase_Sector+0x8c>)
 8001818:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800181c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <FLASH_Erase_Sector+0x8c>)
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	490f      	ldr	r1, [pc, #60]	@ (8001860 <FLASH_Erase_Sector+0x8c>)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800182a:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <FLASH_Erase_Sector+0x8c>)
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	4a0c      	ldr	r2, [pc, #48]	@ (8001860 <FLASH_Erase_Sector+0x8c>)
 8001830:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001834:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001836:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <FLASH_Erase_Sector+0x8c>)
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4313      	orrs	r3, r2
 8001840:	4a07      	ldr	r2, [pc, #28]	@ (8001860 <FLASH_Erase_Sector+0x8c>)
 8001842:	f043 0302 	orr.w	r3, r3, #2
 8001846:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001848:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <FLASH_Erase_Sector+0x8c>)
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <FLASH_Erase_Sector+0x8c>)
 800184e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001852:	6113      	str	r3, [r2, #16]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	40023c00 	.word	0x40023c00

08001864 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001868:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <FLASH_FlushCaches+0x88>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001870:	2b00      	cmp	r3, #0
 8001872:	d017      	beq.n	80018a4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001874:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <FLASH_FlushCaches+0x88>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1c      	ldr	r2, [pc, #112]	@ (80018ec <FLASH_FlushCaches+0x88>)
 800187a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800187e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001880:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <FLASH_FlushCaches+0x88>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a19      	ldr	r2, [pc, #100]	@ (80018ec <FLASH_FlushCaches+0x88>)
 8001886:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <FLASH_FlushCaches+0x88>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a16      	ldr	r2, [pc, #88]	@ (80018ec <FLASH_FlushCaches+0x88>)
 8001892:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001896:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001898:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <FLASH_FlushCaches+0x88>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a13      	ldr	r2, [pc, #76]	@ (80018ec <FLASH_FlushCaches+0x88>)
 800189e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018a2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80018a4:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <FLASH_FlushCaches+0x88>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d017      	beq.n	80018e0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80018b0:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <FLASH_FlushCaches+0x88>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <FLASH_FlushCaches+0x88>)
 80018b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80018ba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <FLASH_FlushCaches+0x88>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <FLASH_FlushCaches+0x88>)
 80018c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <FLASH_FlushCaches+0x88>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a07      	ldr	r2, [pc, #28]	@ (80018ec <FLASH_FlushCaches+0x88>)
 80018ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018d2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <FLASH_FlushCaches+0x88>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <FLASH_FlushCaches+0x88>)
 80018da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018de:	6013      	str	r3, [r2, #0]
  }
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e159      	b.n	8001bc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800190c:	2201      	movs	r2, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	429a      	cmp	r2, r3
 8001926:	f040 8148 	bne.w	8001bba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d005      	beq.n	8001942 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193e:	2b02      	cmp	r3, #2
 8001940:	d130      	bne.n	80019a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001978:	2201      	movs	r2, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	f003 0201 	and.w	r2, r3, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d017      	beq.n	80019e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d123      	bne.n	8001a34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	08da      	lsrs	r2, r3, #3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3208      	adds	r2, #8
 80019f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	220f      	movs	r2, #15
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	08da      	lsrs	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3208      	adds	r2, #8
 8001a2e:	69b9      	ldr	r1, [r7, #24]
 8001a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0203 	and.w	r2, r3, #3
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80a2 	beq.w	8001bba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b57      	ldr	r3, [pc, #348]	@ (8001bd8 <HAL_GPIO_Init+0x2e8>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	4a56      	ldr	r2, [pc, #344]	@ (8001bd8 <HAL_GPIO_Init+0x2e8>)
 8001a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a86:	4b54      	ldr	r3, [pc, #336]	@ (8001bd8 <HAL_GPIO_Init+0x2e8>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a92:	4a52      	ldr	r2, [pc, #328]	@ (8001bdc <HAL_GPIO_Init+0x2ec>)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a49      	ldr	r2, [pc, #292]	@ (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d019      	beq.n	8001af2 <HAL_GPIO_Init+0x202>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a48      	ldr	r2, [pc, #288]	@ (8001be4 <HAL_GPIO_Init+0x2f4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_GPIO_Init+0x1fe>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a47      	ldr	r2, [pc, #284]	@ (8001be8 <HAL_GPIO_Init+0x2f8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d00d      	beq.n	8001aea <HAL_GPIO_Init+0x1fa>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a46      	ldr	r2, [pc, #280]	@ (8001bec <HAL_GPIO_Init+0x2fc>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d007      	beq.n	8001ae6 <HAL_GPIO_Init+0x1f6>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a45      	ldr	r2, [pc, #276]	@ (8001bf0 <HAL_GPIO_Init+0x300>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d101      	bne.n	8001ae2 <HAL_GPIO_Init+0x1f2>
 8001ade:	2304      	movs	r3, #4
 8001ae0:	e008      	b.n	8001af4 <HAL_GPIO_Init+0x204>
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x204>
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e004      	b.n	8001af4 <HAL_GPIO_Init+0x204>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e002      	b.n	8001af4 <HAL_GPIO_Init+0x204>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <HAL_GPIO_Init+0x204>
 8001af2:	2300      	movs	r3, #0
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	f002 0203 	and.w	r2, r2, #3
 8001afa:	0092      	lsls	r2, r2, #2
 8001afc:	4093      	lsls	r3, r2
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b04:	4935      	ldr	r1, [pc, #212]	@ (8001bdc <HAL_GPIO_Init+0x2ec>)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b12:	4b38      	ldr	r3, [pc, #224]	@ (8001bf4 <HAL_GPIO_Init+0x304>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b36:	4a2f      	ldr	r2, [pc, #188]	@ (8001bf4 <HAL_GPIO_Init+0x304>)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf4 <HAL_GPIO_Init+0x304>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b60:	4a24      	ldr	r2, [pc, #144]	@ (8001bf4 <HAL_GPIO_Init+0x304>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b66:	4b23      	ldr	r3, [pc, #140]	@ (8001bf4 <HAL_GPIO_Init+0x304>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001bf4 <HAL_GPIO_Init+0x304>)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b90:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <HAL_GPIO_Init+0x304>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb4:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf4 <HAL_GPIO_Init+0x304>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	2b0f      	cmp	r3, #15
 8001bc4:	f67f aea2 	bls.w	800190c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3724      	adds	r7, #36	@ 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40013800 	.word	0x40013800
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40020800 	.word	0x40020800
 8001bec:	40020c00 	.word	0x40020c00
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40013c00 	.word	0x40013c00

08001bf8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e0bb      	b.n	8001d8c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c14:	2201      	movs	r2, #1
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	f040 80ab 	bne.w	8001d86 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001c30:	4a5c      	ldr	r2, [pc, #368]	@ (8001da4 <HAL_GPIO_DeInit+0x1ac>)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a54      	ldr	r2, [pc, #336]	@ (8001da8 <HAL_GPIO_DeInit+0x1b0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_DeInit+0x96>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a53      	ldr	r2, [pc, #332]	@ (8001dac <HAL_GPIO_DeInit+0x1b4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_DeInit+0x92>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a52      	ldr	r2, [pc, #328]	@ (8001db0 <HAL_GPIO_DeInit+0x1b8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_DeInit+0x8e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a51      	ldr	r2, [pc, #324]	@ (8001db4 <HAL_GPIO_DeInit+0x1bc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_DeInit+0x8a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a50      	ldr	r2, [pc, #320]	@ (8001db8 <HAL_GPIO_DeInit+0x1c0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_DeInit+0x86>
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	e008      	b.n	8001c90 <HAL_GPIO_DeInit+0x98>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	e006      	b.n	8001c90 <HAL_GPIO_DeInit+0x98>
 8001c82:	2303      	movs	r3, #3
 8001c84:	e004      	b.n	8001c90 <HAL_GPIO_DeInit+0x98>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e002      	b.n	8001c90 <HAL_GPIO_DeInit+0x98>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_GPIO_DeInit+0x98>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	f002 0203 	and.w	r2, r2, #3
 8001c96:	0092      	lsls	r2, r2, #2
 8001c98:	4093      	lsls	r3, r2
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d132      	bne.n	8001d06 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001ca0:	4b46      	ldr	r3, [pc, #280]	@ (8001dbc <HAL_GPIO_DeInit+0x1c4>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	4944      	ldr	r1, [pc, #272]	@ (8001dbc <HAL_GPIO_DeInit+0x1c4>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001cae:	4b43      	ldr	r3, [pc, #268]	@ (8001dbc <HAL_GPIO_DeInit+0x1c4>)
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	4941      	ldr	r1, [pc, #260]	@ (8001dbc <HAL_GPIO_DeInit+0x1c4>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001cbc:	4b3f      	ldr	r3, [pc, #252]	@ (8001dbc <HAL_GPIO_DeInit+0x1c4>)
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	493d      	ldr	r1, [pc, #244]	@ (8001dbc <HAL_GPIO_DeInit+0x1c4>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001cca:	4b3c      	ldr	r3, [pc, #240]	@ (8001dbc <HAL_GPIO_DeInit+0x1c4>)
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	493a      	ldr	r1, [pc, #232]	@ (8001dbc <HAL_GPIO_DeInit+0x1c4>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8001da4 <HAL_GPIO_DeInit+0x1ac>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	482a      	ldr	r0, [pc, #168]	@ (8001da4 <HAL_GPIO_DeInit+0x1ac>)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	400a      	ands	r2, r1
 8001d00:	3302      	adds	r3, #2
 8001d02:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2103      	movs	r1, #3
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	401a      	ands	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	08da      	lsrs	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3208      	adds	r2, #8
 8001d24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	08d2      	lsrs	r2, r2, #3
 8001d3c:	4019      	ands	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3208      	adds	r2, #8
 8001d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2103      	movs	r1, #3
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	401a      	ands	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	2101      	movs	r1, #1
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2103      	movs	r1, #3
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	401a      	ands	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	f67f af40 	bls.w	8001c14 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40013800 	.word	0x40013800
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40020800 	.word	0x40020800
 8001db4:	40020c00 	.word	0x40020c00
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40013c00 	.word	0x40013c00

08001dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e001      	b.n	8001de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e0c:	e003      	b.n	8001e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	041a      	lsls	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e267      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d075      	beq.n	8001f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e42:	4b88      	ldr	r3, [pc, #544]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d00c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4e:	4b85      	ldr	r3, [pc, #532]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d112      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e5a:	4b82      	ldr	r3, [pc, #520]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e66:	d10b      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	4b7e      	ldr	r3, [pc, #504]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d05b      	beq.n	8001f2c <HAL_RCC_OscConfig+0x108>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d157      	bne.n	8001f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e242      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e88:	d106      	bne.n	8001e98 <HAL_RCC_OscConfig+0x74>
 8001e8a:	4b76      	ldr	r3, [pc, #472]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a75      	ldr	r2, [pc, #468]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e01d      	b.n	8001ed4 <HAL_RCC_OscConfig+0xb0>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x98>
 8001ea2:	4b70      	ldr	r3, [pc, #448]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a6f      	ldr	r2, [pc, #444]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b6d      	ldr	r3, [pc, #436]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6c      	ldr	r2, [pc, #432]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0xb0>
 8001ebc:	4b69      	ldr	r3, [pc, #420]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a68      	ldr	r2, [pc, #416]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b66      	ldr	r3, [pc, #408]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a65      	ldr	r2, [pc, #404]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff f90a 	bl	80010f4 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff f906 	bl	80010f4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	@ 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e207      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xc0>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff f8f6 	bl	80010f4 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff f8f2 	bl	80010f4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	@ 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e1f3      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	4b51      	ldr	r3, [pc, #324]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0xe8>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d063      	beq.n	8002002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f46:	4b47      	ldr	r3, [pc, #284]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d11c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f52:	4b44      	ldr	r3, [pc, #272]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d116      	bne.n	8001f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	4b41      	ldr	r3, [pc, #260]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_RCC_OscConfig+0x152>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e1c7      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f76:	4b3b      	ldr	r3, [pc, #236]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4937      	ldr	r1, [pc, #220]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	e03a      	b.n	8002002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f94:	4b34      	ldr	r3, [pc, #208]	@ (8002068 <HAL_RCC_OscConfig+0x244>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7ff f8ab 	bl	80010f4 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7ff f8a7 	bl	80010f4 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e1a8      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4925      	ldr	r1, [pc, #148]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd6:	4b24      	ldr	r3, [pc, #144]	@ (8002068 <HAL_RCC_OscConfig+0x244>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f88a 	bl	80010f4 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7ff f886 	bl	80010f4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e187      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d036      	beq.n	800207c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d016      	beq.n	8002044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002016:	4b15      	ldr	r3, [pc, #84]	@ (800206c <HAL_RCC_OscConfig+0x248>)
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7ff f86a 	bl	80010f4 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff f866 	bl	80010f4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e167      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8002038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x200>
 8002042:	e01b      	b.n	800207c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002044:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_RCC_OscConfig+0x248>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7ff f853 	bl	80010f4 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002050:	e00e      	b.n	8002070 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002052:	f7ff f84f 	bl	80010f4 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d907      	bls.n	8002070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e150      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
 8002064:	40023800 	.word	0x40023800
 8002068:	42470000 	.word	0x42470000
 800206c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	4b88      	ldr	r3, [pc, #544]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ea      	bne.n	8002052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 8097 	beq.w	80021b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4b81      	ldr	r3, [pc, #516]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10f      	bne.n	80020ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	4b7d      	ldr	r3, [pc, #500]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b6:	2301      	movs	r3, #1
 80020b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ba:	4b77      	ldr	r3, [pc, #476]	@ (8002298 <HAL_RCC_OscConfig+0x474>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c6:	4b74      	ldr	r3, [pc, #464]	@ (8002298 <HAL_RCC_OscConfig+0x474>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a73      	ldr	r2, [pc, #460]	@ (8002298 <HAL_RCC_OscConfig+0x474>)
 80020cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d2:	f7ff f80f 	bl	80010f4 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020da:	f7ff f80b 	bl	80010f4 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e10c      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002298 <HAL_RCC_OscConfig+0x474>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x2ea>
 8002100:	4b64      	ldr	r3, [pc, #400]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002104:	4a63      	ldr	r2, [pc, #396]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6713      	str	r3, [r2, #112]	@ 0x70
 800210c:	e01c      	b.n	8002148 <HAL_RCC_OscConfig+0x324>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b05      	cmp	r3, #5
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x30c>
 8002116:	4b5f      	ldr	r3, [pc, #380]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211a:	4a5e      	ldr	r2, [pc, #376]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	6713      	str	r3, [r2, #112]	@ 0x70
 8002122:	4b5c      	ldr	r3, [pc, #368]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002126:	4a5b      	ldr	r2, [pc, #364]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6713      	str	r3, [r2, #112]	@ 0x70
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0x324>
 8002130:	4b58      	ldr	r3, [pc, #352]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002134:	4a57      	ldr	r2, [pc, #348]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	6713      	str	r3, [r2, #112]	@ 0x70
 800213c:	4b55      	ldr	r3, [pc, #340]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002140:	4a54      	ldr	r2, [pc, #336]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002142:	f023 0304 	bic.w	r3, r3, #4
 8002146:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d015      	beq.n	800217c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002150:	f7fe ffd0 	bl	80010f4 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	e00a      	b.n	800216e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002158:	f7fe ffcc 	bl	80010f4 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e0cb      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216e:	4b49      	ldr	r3, [pc, #292]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0ee      	beq.n	8002158 <HAL_RCC_OscConfig+0x334>
 800217a:	e014      	b.n	80021a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217c:	f7fe ffba 	bl	80010f4 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002182:	e00a      	b.n	800219a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7fe ffb6 	bl	80010f4 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0b5      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219a:	4b3e      	ldr	r3, [pc, #248]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1ee      	bne.n	8002184 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d105      	bne.n	80021b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ac:	4b39      	ldr	r3, [pc, #228]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	4a38      	ldr	r2, [pc, #224]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 80021b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80a1 	beq.w	8002304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021c2:	4b34      	ldr	r3, [pc, #208]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d05c      	beq.n	8002288 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d141      	bne.n	800225a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b31      	ldr	r3, [pc, #196]	@ (800229c <HAL_RCC_OscConfig+0x478>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7fe ff8a 	bl	80010f4 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe ff86 	bl	80010f4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e087      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f6:	4b27      	ldr	r3, [pc, #156]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69da      	ldr	r2, [r3, #28]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	019b      	lsls	r3, r3, #6
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	3b01      	subs	r3, #1
 800221c:	041b      	lsls	r3, r3, #16
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	061b      	lsls	r3, r3, #24
 8002226:	491b      	ldr	r1, [pc, #108]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222c:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <HAL_RCC_OscConfig+0x478>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7fe ff5f 	bl	80010f4 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223a:	f7fe ff5b 	bl	80010f4 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e05c      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x416>
 8002258:	e054      	b.n	8002304 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <HAL_RCC_OscConfig+0x478>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe ff48 	bl	80010f4 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7fe ff44 	bl	80010f4 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e045      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227a:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x444>
 8002286:	e03d      	b.n	8002304 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e038      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
 8002294:	40023800 	.word	0x40023800
 8002298:	40007000 	.word	0x40007000
 800229c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <HAL_RCC_OscConfig+0x4ec>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d028      	beq.n	8002300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d121      	bne.n	8002300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d11a      	bne.n	8002300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022d0:	4013      	ands	r3, r2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d8:	4293      	cmp	r3, r2
 80022da:	d111      	bne.n	8002300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e6:	085b      	lsrs	r3, r3, #1
 80022e8:	3b01      	subs	r3, #1
 80022ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800

08002314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0cc      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002328:	4b68      	ldr	r3, [pc, #416]	@ (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d90c      	bls.n	8002350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	4b65      	ldr	r3, [pc, #404]	@ (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b63      	ldr	r3, [pc, #396]	@ (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0b8      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002368:	4b59      	ldr	r3, [pc, #356]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a58      	ldr	r2, [pc, #352]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002372:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002380:	4b53      	ldr	r3, [pc, #332]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a52      	ldr	r2, [pc, #328]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800238a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238c:	4b50      	ldr	r3, [pc, #320]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	494d      	ldr	r1, [pc, #308]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d044      	beq.n	8002434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b47      	ldr	r3, [pc, #284]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d119      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e07f      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d003      	beq.n	80023d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d2:	4b3f      	ldr	r3, [pc, #252]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e06f      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e2:	4b3b      	ldr	r3, [pc, #236]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e067      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f2:	4b37      	ldr	r3, [pc, #220]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f023 0203 	bic.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4934      	ldr	r1, [pc, #208]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002404:	f7fe fe76 	bl	80010f4 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	e00a      	b.n	8002422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240c:	f7fe fe72 	bl	80010f4 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e04f      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	4b2b      	ldr	r3, [pc, #172]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 020c 	and.w	r2, r3, #12
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	429a      	cmp	r2, r3
 8002432:	d1eb      	bne.n	800240c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002434:	4b25      	ldr	r3, [pc, #148]	@ (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d20c      	bcs.n	800245c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b20      	ldr	r3, [pc, #128]	@ (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e032      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002468:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4916      	ldr	r1, [pc, #88]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002486:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	490e      	ldr	r1, [pc, #56]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800249a:	f000 f821 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 800249e:	4602      	mov	r2, r0
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	490a      	ldr	r1, [pc, #40]	@ (80024d4 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	5ccb      	ldrb	r3, [r1, r3]
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	4a09      	ldr	r2, [pc, #36]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024b6:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fdd6 	bl	800106c <HAL_InitTick>

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023c00 	.word	0x40023c00
 80024d0:	40023800 	.word	0x40023800
 80024d4:	08004460 	.word	0x08004460
 80024d8:	20000008 	.word	0x20000008
 80024dc:	2000000c 	.word	0x2000000c

080024e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e4:	b090      	sub	sp, #64	@ 0x40
 80024e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f8:	4b59      	ldr	r3, [pc, #356]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x180>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 030c 	and.w	r3, r3, #12
 8002500:	2b08      	cmp	r3, #8
 8002502:	d00d      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x40>
 8002504:	2b08      	cmp	r3, #8
 8002506:	f200 80a1 	bhi.w	800264c <HAL_RCC_GetSysClockFreq+0x16c>
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x34>
 800250e:	2b04      	cmp	r3, #4
 8002510:	d003      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x3a>
 8002512:	e09b      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002514:	4b53      	ldr	r3, [pc, #332]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x184>)
 8002516:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002518:	e09b      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800251a:	4b53      	ldr	r3, [pc, #332]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x188>)
 800251c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800251e:	e098      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002520:	4b4f      	ldr	r3, [pc, #316]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x180>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002528:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800252a:	4b4d      	ldr	r3, [pc, #308]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x180>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d028      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002536:	4b4a      	ldr	r3, [pc, #296]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x180>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	099b      	lsrs	r3, r3, #6
 800253c:	2200      	movs	r2, #0
 800253e:	623b      	str	r3, [r7, #32]
 8002540:	627a      	str	r2, [r7, #36]	@ 0x24
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002548:	2100      	movs	r1, #0
 800254a:	4b47      	ldr	r3, [pc, #284]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x188>)
 800254c:	fb03 f201 	mul.w	r2, r3, r1
 8002550:	2300      	movs	r3, #0
 8002552:	fb00 f303 	mul.w	r3, r0, r3
 8002556:	4413      	add	r3, r2
 8002558:	4a43      	ldr	r2, [pc, #268]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x188>)
 800255a:	fba0 1202 	umull	r1, r2, r0, r2
 800255e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002560:	460a      	mov	r2, r1
 8002562:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002566:	4413      	add	r3, r2
 8002568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800256a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256c:	2200      	movs	r2, #0
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	61fa      	str	r2, [r7, #28]
 8002572:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002576:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800257a:	f7fd fe81 	bl	8000280 <__aeabi_uldivmod>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4613      	mov	r3, r2
 8002584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002586:	e053      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002588:	4b35      	ldr	r3, [pc, #212]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x180>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	2200      	movs	r2, #0
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	617a      	str	r2, [r7, #20]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800259a:	f04f 0b00 	mov.w	fp, #0
 800259e:	4652      	mov	r2, sl
 80025a0:	465b      	mov	r3, fp
 80025a2:	f04f 0000 	mov.w	r0, #0
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	0159      	lsls	r1, r3, #5
 80025ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b0:	0150      	lsls	r0, r2, #5
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	ebb2 080a 	subs.w	r8, r2, sl
 80025ba:	eb63 090b 	sbc.w	r9, r3, fp
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025d2:	ebb2 0408 	subs.w	r4, r2, r8
 80025d6:	eb63 0509 	sbc.w	r5, r3, r9
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	00eb      	lsls	r3, r5, #3
 80025e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025e8:	00e2      	lsls	r2, r4, #3
 80025ea:	4614      	mov	r4, r2
 80025ec:	461d      	mov	r5, r3
 80025ee:	eb14 030a 	adds.w	r3, r4, sl
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	eb45 030b 	adc.w	r3, r5, fp
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002606:	4629      	mov	r1, r5
 8002608:	028b      	lsls	r3, r1, #10
 800260a:	4621      	mov	r1, r4
 800260c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002610:	4621      	mov	r1, r4
 8002612:	028a      	lsls	r2, r1, #10
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800261a:	2200      	movs	r2, #0
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	60fa      	str	r2, [r7, #12]
 8002620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002624:	f7fd fe2c 	bl	8000280 <__aeabi_uldivmod>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4613      	mov	r3, r2
 800262e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x180>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002640:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800264a:	e002      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x184>)
 800264e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002654:	4618      	mov	r0, r3
 8002656:	3740      	adds	r7, #64	@ 0x40
 8002658:	46bd      	mov	sp, r7
 800265a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	00f42400 	.word	0x00f42400
 8002668:	017d7840 	.word	0x017d7840

0800266c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002672:	f7fe fd3f 	bl	80010f4 <HAL_GetTick>
 8002676:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002678:	4b5d      	ldr	r3, [pc, #372]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a5c      	ldr	r2, [pc, #368]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002686:	f7fe fd35 	bl	80010f4 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0a7      	b.n	80027e8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002698:	4b55      	ldr	r3, [pc, #340]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80026a4:	4b52      	ldr	r3, [pc, #328]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a51      	ldr	r2, [pc, #324]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 80026aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80026b0:	f7fe fd20 	bl	80010f4 <HAL_GetTick>
 80026b4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80026b6:	4b4e      	ldr	r3, [pc, #312]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026be:	f7fe fd19 	bl	80010f4 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e089      	b.n	80027e8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80026d4:	4b46      	ldr	r3, [pc, #280]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1ee      	bne.n	80026be <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80026e0:	f7fe fd08 	bl	80010f4 <HAL_GetTick>
 80026e4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80026e6:	4b42      	ldr	r3, [pc, #264]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a41      	ldr	r2, [pc, #260]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 80026ec:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 80026f0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f4:	f7fe fcfe 	bl	80010f4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	@ 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e070      	b.n	80027e8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002706:	4b3a      	ldr	r3, [pc, #232]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002712:	f7fe fcef 	bl	80010f4 <HAL_GetTick>
 8002716:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002718:	4b35      	ldr	r3, [pc, #212]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a34      	ldr	r2, [pc, #208]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 800271e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002722:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002726:	f7fe fce5 	bl	80010f4 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e057      	b.n	80027e8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002738:	4b2d      	ldr	r3, [pc, #180]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f0      	bne.n	8002726 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002744:	f7fe fcd6 	bl	80010f4 <HAL_GetTick>
 8002748:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800274a:	4b29      	ldr	r3, [pc, #164]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a28      	ldr	r2, [pc, #160]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 8002750:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002754:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002758:	f7fe fccc 	bl	80010f4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e03e      	b.n	80027e8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800276a:	4b21      	ldr	r3, [pc, #132]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8002776:	4b1e      	ldr	r3, [pc, #120]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 8002778:	4a1e      	ldr	r2, [pc, #120]	@ (80027f4 <HAL_RCC_DeInit+0x188>)
 800277a:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800277c:	4b1c      	ldr	r3, [pc, #112]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 800277e:	4a1e      	ldr	r2, [pc, #120]	@ (80027f8 <HAL_RCC_DeInit+0x18c>)
 8002780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002784:	4b1a      	ldr	r3, [pc, #104]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a19      	ldr	r2, [pc, #100]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 800278a:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800278e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002790:	4b17      	ldr	r3, [pc, #92]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4a16      	ldr	r2, [pc, #88]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 8002796:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800279a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 800279c:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a13      	ldr	r2, [pc, #76]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 80027a2:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 80027a6:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80027a8:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4a10      	ldr	r2, [pc, #64]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 80027ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027b2:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80027b4:	4b0e      	ldr	r3, [pc, #56]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 80027b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b8:	4a0d      	ldr	r2, [pc, #52]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80027c0:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 80027c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c4:	4a0a      	ldr	r2, [pc, #40]	@ (80027f0 <HAL_RCC_DeInit+0x184>)
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ca:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <HAL_RCC_DeInit+0x190>)
 80027ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002800 <HAL_RCC_DeInit+0x194>)
 80027d0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <HAL_RCC_DeInit+0x198>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fc48 	bl	800106c <HAL_InitTick>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80027e6:	2300      	movs	r3, #0
  }
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40023800 	.word	0x40023800
 80027f4:	04003010 	.word	0x04003010
 80027f8:	20003010 	.word	0x20003010
 80027fc:	20000008 	.word	0x20000008
 8002800:	00f42400 	.word	0x00f42400
 8002804:	2000000c 	.word	0x2000000c

08002808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e07b      	b.n	8002912 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	2b00      	cmp	r3, #0
 8002820:	d108      	bne.n	8002834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800282a:	d009      	beq.n	8002840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	61da      	str	r2, [r3, #28]
 8002832:	e005      	b.n	8002840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fa3a 	bl	8000cd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002876:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c4:	ea42 0103 	orr.w	r1, r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	0c1b      	lsrs	r3, r3, #16
 80028de:	f003 0104 	and.w	r1, r3, #4
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	f003 0210 	and.w	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002900:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e01a      	b.n	8002962 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002942:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7fe fa0d 	bl	8000d64 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b088      	sub	sp, #32
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	4613      	mov	r3, r2
 8002978:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800297a:	f7fe fbbb 	bl	80010f4 <HAL_GetTick>
 800297e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d001      	beq.n	8002994 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002990:	2302      	movs	r3, #2
 8002992:	e12a      	b.n	8002bea <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_SPI_Transmit+0x36>
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e122      	b.n	8002bea <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_SPI_Transmit+0x48>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e11b      	b.n	8002bea <HAL_SPI_Transmit+0x280>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2203      	movs	r2, #3
 80029be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	88fa      	ldrh	r2, [r7, #6]
 80029d2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	88fa      	ldrh	r2, [r7, #6]
 80029d8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a00:	d10f      	bne.n	8002a22 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2c:	2b40      	cmp	r3, #64	@ 0x40
 8002a2e:	d007      	beq.n	8002a40 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a48:	d152      	bne.n	8002af0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_SPI_Transmit+0xee>
 8002a52:	8b7b      	ldrh	r3, [r7, #26]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d145      	bne.n	8002ae4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	881a      	ldrh	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a68:	1c9a      	adds	r2, r3, #2
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a7c:	e032      	b.n	8002ae4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d112      	bne.n	8002ab2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	881a      	ldrh	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	1c9a      	adds	r2, r3, #2
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ab0:	e018      	b.n	8002ae4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ab2:	f7fe fb1f 	bl	80010f4 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d803      	bhi.n	8002aca <HAL_SPI_Transmit+0x160>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d102      	bne.n	8002ad0 <HAL_SPI_Transmit+0x166>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e082      	b.n	8002bea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1c7      	bne.n	8002a7e <HAL_SPI_Transmit+0x114>
 8002aee:	e053      	b.n	8002b98 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_SPI_Transmit+0x194>
 8002af8:	8b7b      	ldrh	r3, [r7, #26]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d147      	bne.n	8002b8e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	330c      	adds	r3, #12
 8002b08:	7812      	ldrb	r2, [r2, #0]
 8002b0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b24:	e033      	b.n	8002b8e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d113      	bne.n	8002b5c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	7812      	ldrb	r2, [r2, #0]
 8002b40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b5a:	e018      	b.n	8002b8e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b5c:	f7fe faca 	bl	80010f4 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d803      	bhi.n	8002b74 <HAL_SPI_Transmit+0x20a>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d102      	bne.n	8002b7a <HAL_SPI_Transmit+0x210>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e02d      	b.n	8002bea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1c6      	bne.n	8002b26 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	6839      	ldr	r1, [r7, #0]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 fbd9 	bl	8003354 <SPI_EndRxTxTransaction>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10a      	bne.n	8002bcc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002be8:	2300      	movs	r3, #0
  }
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b088      	sub	sp, #32
 8002bf6:	af02      	add	r7, sp, #8
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d001      	beq.n	8002c12 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e104      	b.n	8002e1c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c1a:	d112      	bne.n	8002c42 <HAL_SPI_Receive+0x50>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10e      	bne.n	8002c42 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2204      	movs	r2, #4
 8002c28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c2c:	88fa      	ldrh	r2, [r7, #6]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	4613      	mov	r3, r2
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f8f3 	bl	8002e24 <HAL_SPI_TransmitReceive>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	e0ec      	b.n	8002e1c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c42:	f7fe fa57 	bl	80010f4 <HAL_GetTick>
 8002c46:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_SPI_Receive+0x62>
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0e1      	b.n	8002e1c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_SPI_Receive+0x74>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0da      	b.n	8002e1c <HAL_SPI_Receive+0x22a>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2204      	movs	r2, #4
 8002c72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	88fa      	ldrh	r2, [r7, #6]
 8002c86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	88fa      	ldrh	r2, [r7, #6]
 8002c8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cb4:	d10f      	bne.n	8002cd6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce0:	2b40      	cmp	r3, #64	@ 0x40
 8002ce2:	d007      	beq.n	8002cf4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d170      	bne.n	8002dde <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cfc:	e035      	b.n	8002d6a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d115      	bne.n	8002d38 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f103 020c 	add.w	r2, r3, #12
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d18:	7812      	ldrb	r2, [r2, #0]
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d36:	e018      	b.n	8002d6a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d38:	f7fe f9dc 	bl	80010f4 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d803      	bhi.n	8002d50 <HAL_SPI_Receive+0x15e>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4e:	d102      	bne.n	8002d56 <HAL_SPI_Receive+0x164>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e058      	b.n	8002e1c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1c4      	bne.n	8002cfe <HAL_SPI_Receive+0x10c>
 8002d74:	e038      	b.n	8002de8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d113      	bne.n	8002dac <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8e:	b292      	uxth	r2, r2
 8002d90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d96:	1c9a      	adds	r2, r3, #2
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002daa:	e018      	b.n	8002dde <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dac:	f7fe f9a2 	bl	80010f4 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d803      	bhi.n	8002dc4 <HAL_SPI_Receive+0x1d2>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d102      	bne.n	8002dca <HAL_SPI_Receive+0x1d8>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e01e      	b.n	8002e1c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1c6      	bne.n	8002d76 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	6839      	ldr	r1, [r7, #0]
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fa4b 	bl	8003288 <SPI_EndRxTransaction>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	@ 0x28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e32:	2301      	movs	r3, #1
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e36:	f7fe f95d 	bl	80010f4 <HAL_GetTick>
 8002e3a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e42:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e4e:	7ffb      	ldrb	r3, [r7, #31]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d00c      	beq.n	8002e6e <HAL_SPI_TransmitReceive+0x4a>
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e5a:	d106      	bne.n	8002e6a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <HAL_SPI_TransmitReceive+0x46>
 8002e64:	7ffb      	ldrb	r3, [r7, #31]
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d001      	beq.n	8002e6e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e17f      	b.n	800316e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_SPI_TransmitReceive+0x5c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_SPI_TransmitReceive+0x5c>
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e174      	b.n	800316e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_SPI_TransmitReceive+0x6e>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e16d      	b.n	800316e <HAL_SPI_TransmitReceive+0x34a>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d003      	beq.n	8002eae <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2205      	movs	r2, #5
 8002eaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	887a      	ldrh	r2, [r7, #2]
 8002ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	887a      	ldrh	r2, [r7, #2]
 8002ed0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	887a      	ldrh	r2, [r7, #2]
 8002ed6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eee:	2b40      	cmp	r3, #64	@ 0x40
 8002ef0:	d007      	beq.n	8002f02 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f0a:	d17e      	bne.n	800300a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_SPI_TransmitReceive+0xf6>
 8002f14:	8afb      	ldrh	r3, [r7, #22]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d16c      	bne.n	8002ff4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	881a      	ldrh	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	1c9a      	adds	r2, r3, #2
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f3e:	e059      	b.n	8002ff4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d11b      	bne.n	8002f86 <HAL_SPI_TransmitReceive+0x162>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d016      	beq.n	8002f86 <HAL_SPI_TransmitReceive+0x162>
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d113      	bne.n	8002f86 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	881a      	ldrh	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	1c9a      	adds	r2, r3, #2
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d119      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x1a4>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d014      	beq.n	8002fc8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa8:	b292      	uxth	r2, r2
 8002faa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb0:	1c9a      	adds	r2, r3, #2
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fc8:	f7fe f894 	bl	80010f4 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d80d      	bhi.n	8002ff4 <HAL_SPI_TransmitReceive+0x1d0>
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fde:	d009      	beq.n	8002ff4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0bc      	b.n	800316e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1a0      	bne.n	8002f40 <HAL_SPI_TransmitReceive+0x11c>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d19b      	bne.n	8002f40 <HAL_SPI_TransmitReceive+0x11c>
 8003008:	e082      	b.n	8003110 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_SPI_TransmitReceive+0x1f4>
 8003012:	8afb      	ldrh	r3, [r7, #22]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d171      	bne.n	80030fc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800303e:	e05d      	b.n	80030fc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d11c      	bne.n	8003088 <HAL_SPI_TransmitReceive+0x264>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d017      	beq.n	8003088 <HAL_SPI_TransmitReceive+0x264>
 8003058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305a:	2b01      	cmp	r3, #1
 800305c:	d114      	bne.n	8003088 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	330c      	adds	r3, #12
 8003068:	7812      	ldrb	r2, [r2, #0]
 800306a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d119      	bne.n	80030ca <HAL_SPI_TransmitReceive+0x2a6>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d014      	beq.n	80030ca <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030c6:	2301      	movs	r3, #1
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030ca:	f7fe f813 	bl	80010f4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d803      	bhi.n	80030e2 <HAL_SPI_TransmitReceive+0x2be>
 80030da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d102      	bne.n	80030e8 <HAL_SPI_TransmitReceive+0x2c4>
 80030e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d109      	bne.n	80030fc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e038      	b.n	800316e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d19c      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x21c>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d197      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003110:	6a3a      	ldr	r2, [r7, #32]
 8003112:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f91d 	bl	8003354 <SPI_EndRxTxTransaction>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e01d      	b.n	800316e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800316c:	2300      	movs	r3, #0
  }
}
 800316e:	4618      	mov	r0, r3
 8003170:	3728      	adds	r7, #40	@ 0x28
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003188:	f7fd ffb4 	bl	80010f4 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	4413      	add	r3, r2
 8003196:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003198:	f7fd ffac 	bl	80010f4 <HAL_GetTick>
 800319c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800319e:	4b39      	ldr	r3, [pc, #228]	@ (8003284 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	015b      	lsls	r3, r3, #5
 80031a4:	0d1b      	lsrs	r3, r3, #20
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	fb02 f303 	mul.w	r3, r2, r3
 80031ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ae:	e054      	b.n	800325a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b6:	d050      	beq.n	800325a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031b8:	f7fd ff9c 	bl	80010f4 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d902      	bls.n	80031ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d13d      	bne.n	800324a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031e6:	d111      	bne.n	800320c <SPI_WaitFlagStateUntilTimeout+0x94>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f0:	d004      	beq.n	80031fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fa:	d107      	bne.n	800320c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800320a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003214:	d10f      	bne.n	8003236 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003234:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e017      	b.n	800327a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	3b01      	subs	r3, #1
 8003258:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4013      	ands	r3, r2
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	429a      	cmp	r2, r3
 8003268:	bf0c      	ite	eq
 800326a:	2301      	moveq	r3, #1
 800326c:	2300      	movne	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	429a      	cmp	r2, r3
 8003276:	d19b      	bne.n	80031b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000008 	.word	0x20000008

08003288 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800329c:	d111      	bne.n	80032c2 <SPI_EndRxTransaction+0x3a>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032a6:	d004      	beq.n	80032b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b0:	d107      	bne.n	80032c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032ca:	d12a      	bne.n	8003322 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d4:	d012      	beq.n	80032fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2200      	movs	r2, #0
 80032de:	2180      	movs	r1, #128	@ 0x80
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f7ff ff49 	bl	8003178 <SPI_WaitFlagStateUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d02d      	beq.n	8003348 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e026      	b.n	800334a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	2101      	movs	r1, #1
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f7ff ff36 	bl	8003178 <SPI_WaitFlagStateUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01a      	beq.n	8003348 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003316:	f043 0220 	orr.w	r2, r3, #32
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e013      	b.n	800334a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2200      	movs	r2, #0
 800332a:	2101      	movs	r1, #1
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff ff23 	bl	8003178 <SPI_WaitFlagStateUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e000      	b.n	800334a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2201      	movs	r2, #1
 8003368:	2102      	movs	r1, #2
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7ff ff04 	bl	8003178 <SPI_WaitFlagStateUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337a:	f043 0220 	orr.w	r2, r3, #32
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e032      	b.n	80033ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003386:	4b1b      	ldr	r3, [pc, #108]	@ (80033f4 <SPI_EndRxTxTransaction+0xa0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1b      	ldr	r2, [pc, #108]	@ (80033f8 <SPI_EndRxTxTransaction+0xa4>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	0d5b      	lsrs	r3, r3, #21
 8003392:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033a4:	d112      	bne.n	80033cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2200      	movs	r2, #0
 80033ae:	2180      	movs	r1, #128	@ 0x80
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7ff fee1 	bl	8003178 <SPI_WaitFlagStateUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d016      	beq.n	80033ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e00f      	b.n	80033ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e2:	2b80      	cmp	r3, #128	@ 0x80
 80033e4:	d0f2      	beq.n	80033cc <SPI_EndRxTxTransaction+0x78>
 80033e6:	e000      	b.n	80033ea <SPI_EndRxTxTransaction+0x96>
        break;
 80033e8:	bf00      	nop
  }

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000008 	.word	0x20000008
 80033f8:	165e9f81 	.word	0x165e9f81

080033fc <std>:
 80033fc:	2300      	movs	r3, #0
 80033fe:	b510      	push	{r4, lr}
 8003400:	4604      	mov	r4, r0
 8003402:	e9c0 3300 	strd	r3, r3, [r0]
 8003406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800340a:	6083      	str	r3, [r0, #8]
 800340c:	8181      	strh	r1, [r0, #12]
 800340e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003410:	81c2      	strh	r2, [r0, #14]
 8003412:	6183      	str	r3, [r0, #24]
 8003414:	4619      	mov	r1, r3
 8003416:	2208      	movs	r2, #8
 8003418:	305c      	adds	r0, #92	@ 0x5c
 800341a:	f000 fa01 	bl	8003820 <memset>
 800341e:	4b0d      	ldr	r3, [pc, #52]	@ (8003454 <std+0x58>)
 8003420:	6263      	str	r3, [r4, #36]	@ 0x24
 8003422:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <std+0x5c>)
 8003424:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <std+0x60>)
 8003428:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800342a:	4b0d      	ldr	r3, [pc, #52]	@ (8003460 <std+0x64>)
 800342c:	6323      	str	r3, [r4, #48]	@ 0x30
 800342e:	4b0d      	ldr	r3, [pc, #52]	@ (8003464 <std+0x68>)
 8003430:	6224      	str	r4, [r4, #32]
 8003432:	429c      	cmp	r4, r3
 8003434:	d006      	beq.n	8003444 <std+0x48>
 8003436:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800343a:	4294      	cmp	r4, r2
 800343c:	d002      	beq.n	8003444 <std+0x48>
 800343e:	33d0      	adds	r3, #208	@ 0xd0
 8003440:	429c      	cmp	r4, r3
 8003442:	d105      	bne.n	8003450 <std+0x54>
 8003444:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800344c:	f000 ba60 	b.w	8003910 <__retarget_lock_init_recursive>
 8003450:	bd10      	pop	{r4, pc}
 8003452:	bf00      	nop
 8003454:	08003671 	.word	0x08003671
 8003458:	08003693 	.word	0x08003693
 800345c:	080036cb 	.word	0x080036cb
 8003460:	080036ef 	.word	0x080036ef
 8003464:	20000224 	.word	0x20000224

08003468 <stdio_exit_handler>:
 8003468:	4a02      	ldr	r2, [pc, #8]	@ (8003474 <stdio_exit_handler+0xc>)
 800346a:	4903      	ldr	r1, [pc, #12]	@ (8003478 <stdio_exit_handler+0x10>)
 800346c:	4803      	ldr	r0, [pc, #12]	@ (800347c <stdio_exit_handler+0x14>)
 800346e:	f000 b869 	b.w	8003544 <_fwalk_sglue>
 8003472:	bf00      	nop
 8003474:	20000014 	.word	0x20000014
 8003478:	080041b1 	.word	0x080041b1
 800347c:	20000024 	.word	0x20000024

08003480 <cleanup_stdio>:
 8003480:	6841      	ldr	r1, [r0, #4]
 8003482:	4b0c      	ldr	r3, [pc, #48]	@ (80034b4 <cleanup_stdio+0x34>)
 8003484:	4299      	cmp	r1, r3
 8003486:	b510      	push	{r4, lr}
 8003488:	4604      	mov	r4, r0
 800348a:	d001      	beq.n	8003490 <cleanup_stdio+0x10>
 800348c:	f000 fe90 	bl	80041b0 <_fflush_r>
 8003490:	68a1      	ldr	r1, [r4, #8]
 8003492:	4b09      	ldr	r3, [pc, #36]	@ (80034b8 <cleanup_stdio+0x38>)
 8003494:	4299      	cmp	r1, r3
 8003496:	d002      	beq.n	800349e <cleanup_stdio+0x1e>
 8003498:	4620      	mov	r0, r4
 800349a:	f000 fe89 	bl	80041b0 <_fflush_r>
 800349e:	68e1      	ldr	r1, [r4, #12]
 80034a0:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <cleanup_stdio+0x3c>)
 80034a2:	4299      	cmp	r1, r3
 80034a4:	d004      	beq.n	80034b0 <cleanup_stdio+0x30>
 80034a6:	4620      	mov	r0, r4
 80034a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ac:	f000 be80 	b.w	80041b0 <_fflush_r>
 80034b0:	bd10      	pop	{r4, pc}
 80034b2:	bf00      	nop
 80034b4:	20000224 	.word	0x20000224
 80034b8:	2000028c 	.word	0x2000028c
 80034bc:	200002f4 	.word	0x200002f4

080034c0 <global_stdio_init.part.0>:
 80034c0:	b510      	push	{r4, lr}
 80034c2:	4b0b      	ldr	r3, [pc, #44]	@ (80034f0 <global_stdio_init.part.0+0x30>)
 80034c4:	4c0b      	ldr	r4, [pc, #44]	@ (80034f4 <global_stdio_init.part.0+0x34>)
 80034c6:	4a0c      	ldr	r2, [pc, #48]	@ (80034f8 <global_stdio_init.part.0+0x38>)
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	4620      	mov	r0, r4
 80034cc:	2200      	movs	r2, #0
 80034ce:	2104      	movs	r1, #4
 80034d0:	f7ff ff94 	bl	80033fc <std>
 80034d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80034d8:	2201      	movs	r2, #1
 80034da:	2109      	movs	r1, #9
 80034dc:	f7ff ff8e 	bl	80033fc <std>
 80034e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80034e4:	2202      	movs	r2, #2
 80034e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ea:	2112      	movs	r1, #18
 80034ec:	f7ff bf86 	b.w	80033fc <std>
 80034f0:	2000035c 	.word	0x2000035c
 80034f4:	20000224 	.word	0x20000224
 80034f8:	08003469 	.word	0x08003469

080034fc <__sfp_lock_acquire>:
 80034fc:	4801      	ldr	r0, [pc, #4]	@ (8003504 <__sfp_lock_acquire+0x8>)
 80034fe:	f000 ba08 	b.w	8003912 <__retarget_lock_acquire_recursive>
 8003502:	bf00      	nop
 8003504:	20000365 	.word	0x20000365

08003508 <__sfp_lock_release>:
 8003508:	4801      	ldr	r0, [pc, #4]	@ (8003510 <__sfp_lock_release+0x8>)
 800350a:	f000 ba03 	b.w	8003914 <__retarget_lock_release_recursive>
 800350e:	bf00      	nop
 8003510:	20000365 	.word	0x20000365

08003514 <__sinit>:
 8003514:	b510      	push	{r4, lr}
 8003516:	4604      	mov	r4, r0
 8003518:	f7ff fff0 	bl	80034fc <__sfp_lock_acquire>
 800351c:	6a23      	ldr	r3, [r4, #32]
 800351e:	b11b      	cbz	r3, 8003528 <__sinit+0x14>
 8003520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003524:	f7ff bff0 	b.w	8003508 <__sfp_lock_release>
 8003528:	4b04      	ldr	r3, [pc, #16]	@ (800353c <__sinit+0x28>)
 800352a:	6223      	str	r3, [r4, #32]
 800352c:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <__sinit+0x2c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f5      	bne.n	8003520 <__sinit+0xc>
 8003534:	f7ff ffc4 	bl	80034c0 <global_stdio_init.part.0>
 8003538:	e7f2      	b.n	8003520 <__sinit+0xc>
 800353a:	bf00      	nop
 800353c:	08003481 	.word	0x08003481
 8003540:	2000035c 	.word	0x2000035c

08003544 <_fwalk_sglue>:
 8003544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003548:	4607      	mov	r7, r0
 800354a:	4688      	mov	r8, r1
 800354c:	4614      	mov	r4, r2
 800354e:	2600      	movs	r6, #0
 8003550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003554:	f1b9 0901 	subs.w	r9, r9, #1
 8003558:	d505      	bpl.n	8003566 <_fwalk_sglue+0x22>
 800355a:	6824      	ldr	r4, [r4, #0]
 800355c:	2c00      	cmp	r4, #0
 800355e:	d1f7      	bne.n	8003550 <_fwalk_sglue+0xc>
 8003560:	4630      	mov	r0, r6
 8003562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003566:	89ab      	ldrh	r3, [r5, #12]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d907      	bls.n	800357c <_fwalk_sglue+0x38>
 800356c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003570:	3301      	adds	r3, #1
 8003572:	d003      	beq.n	800357c <_fwalk_sglue+0x38>
 8003574:	4629      	mov	r1, r5
 8003576:	4638      	mov	r0, r7
 8003578:	47c0      	blx	r8
 800357a:	4306      	orrs	r6, r0
 800357c:	3568      	adds	r5, #104	@ 0x68
 800357e:	e7e9      	b.n	8003554 <_fwalk_sglue+0x10>

08003580 <iprintf>:
 8003580:	b40f      	push	{r0, r1, r2, r3}
 8003582:	b507      	push	{r0, r1, r2, lr}
 8003584:	4906      	ldr	r1, [pc, #24]	@ (80035a0 <iprintf+0x20>)
 8003586:	ab04      	add	r3, sp, #16
 8003588:	6808      	ldr	r0, [r1, #0]
 800358a:	f853 2b04 	ldr.w	r2, [r3], #4
 800358e:	6881      	ldr	r1, [r0, #8]
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	f000 fae3 	bl	8003b5c <_vfiprintf_r>
 8003596:	b003      	add	sp, #12
 8003598:	f85d eb04 	ldr.w	lr, [sp], #4
 800359c:	b004      	add	sp, #16
 800359e:	4770      	bx	lr
 80035a0:	20000020 	.word	0x20000020

080035a4 <putchar>:
 80035a4:	4b02      	ldr	r3, [pc, #8]	@ (80035b0 <putchar+0xc>)
 80035a6:	4601      	mov	r1, r0
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	6882      	ldr	r2, [r0, #8]
 80035ac:	f000 be8a 	b.w	80042c4 <_putc_r>
 80035b0:	20000020 	.word	0x20000020

080035b4 <_puts_r>:
 80035b4:	6a03      	ldr	r3, [r0, #32]
 80035b6:	b570      	push	{r4, r5, r6, lr}
 80035b8:	6884      	ldr	r4, [r0, #8]
 80035ba:	4605      	mov	r5, r0
 80035bc:	460e      	mov	r6, r1
 80035be:	b90b      	cbnz	r3, 80035c4 <_puts_r+0x10>
 80035c0:	f7ff ffa8 	bl	8003514 <__sinit>
 80035c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035c6:	07db      	lsls	r3, r3, #31
 80035c8:	d405      	bmi.n	80035d6 <_puts_r+0x22>
 80035ca:	89a3      	ldrh	r3, [r4, #12]
 80035cc:	0598      	lsls	r0, r3, #22
 80035ce:	d402      	bmi.n	80035d6 <_puts_r+0x22>
 80035d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035d2:	f000 f99e 	bl	8003912 <__retarget_lock_acquire_recursive>
 80035d6:	89a3      	ldrh	r3, [r4, #12]
 80035d8:	0719      	lsls	r1, r3, #28
 80035da:	d502      	bpl.n	80035e2 <_puts_r+0x2e>
 80035dc:	6923      	ldr	r3, [r4, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d135      	bne.n	800364e <_puts_r+0x9a>
 80035e2:	4621      	mov	r1, r4
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 f8c5 	bl	8003774 <__swsetup_r>
 80035ea:	b380      	cbz	r0, 800364e <_puts_r+0x9a>
 80035ec:	f04f 35ff 	mov.w	r5, #4294967295
 80035f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035f2:	07da      	lsls	r2, r3, #31
 80035f4:	d405      	bmi.n	8003602 <_puts_r+0x4e>
 80035f6:	89a3      	ldrh	r3, [r4, #12]
 80035f8:	059b      	lsls	r3, r3, #22
 80035fa:	d402      	bmi.n	8003602 <_puts_r+0x4e>
 80035fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035fe:	f000 f989 	bl	8003914 <__retarget_lock_release_recursive>
 8003602:	4628      	mov	r0, r5
 8003604:	bd70      	pop	{r4, r5, r6, pc}
 8003606:	2b00      	cmp	r3, #0
 8003608:	da04      	bge.n	8003614 <_puts_r+0x60>
 800360a:	69a2      	ldr	r2, [r4, #24]
 800360c:	429a      	cmp	r2, r3
 800360e:	dc17      	bgt.n	8003640 <_puts_r+0x8c>
 8003610:	290a      	cmp	r1, #10
 8003612:	d015      	beq.n	8003640 <_puts_r+0x8c>
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	6022      	str	r2, [r4, #0]
 800361a:	7019      	strb	r1, [r3, #0]
 800361c:	68a3      	ldr	r3, [r4, #8]
 800361e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003622:	3b01      	subs	r3, #1
 8003624:	60a3      	str	r3, [r4, #8]
 8003626:	2900      	cmp	r1, #0
 8003628:	d1ed      	bne.n	8003606 <_puts_r+0x52>
 800362a:	2b00      	cmp	r3, #0
 800362c:	da11      	bge.n	8003652 <_puts_r+0x9e>
 800362e:	4622      	mov	r2, r4
 8003630:	210a      	movs	r1, #10
 8003632:	4628      	mov	r0, r5
 8003634:	f000 f85f 	bl	80036f6 <__swbuf_r>
 8003638:	3001      	adds	r0, #1
 800363a:	d0d7      	beq.n	80035ec <_puts_r+0x38>
 800363c:	250a      	movs	r5, #10
 800363e:	e7d7      	b.n	80035f0 <_puts_r+0x3c>
 8003640:	4622      	mov	r2, r4
 8003642:	4628      	mov	r0, r5
 8003644:	f000 f857 	bl	80036f6 <__swbuf_r>
 8003648:	3001      	adds	r0, #1
 800364a:	d1e7      	bne.n	800361c <_puts_r+0x68>
 800364c:	e7ce      	b.n	80035ec <_puts_r+0x38>
 800364e:	3e01      	subs	r6, #1
 8003650:	e7e4      	b.n	800361c <_puts_r+0x68>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	6022      	str	r2, [r4, #0]
 8003658:	220a      	movs	r2, #10
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	e7ee      	b.n	800363c <_puts_r+0x88>
	...

08003660 <puts>:
 8003660:	4b02      	ldr	r3, [pc, #8]	@ (800366c <puts+0xc>)
 8003662:	4601      	mov	r1, r0
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	f7ff bfa5 	b.w	80035b4 <_puts_r>
 800366a:	bf00      	nop
 800366c:	20000020 	.word	0x20000020

08003670 <__sread>:
 8003670:	b510      	push	{r4, lr}
 8003672:	460c      	mov	r4, r1
 8003674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003678:	f000 f8fc 	bl	8003874 <_read_r>
 800367c:	2800      	cmp	r0, #0
 800367e:	bfab      	itete	ge
 8003680:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003682:	89a3      	ldrhlt	r3, [r4, #12]
 8003684:	181b      	addge	r3, r3, r0
 8003686:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800368a:	bfac      	ite	ge
 800368c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800368e:	81a3      	strhlt	r3, [r4, #12]
 8003690:	bd10      	pop	{r4, pc}

08003692 <__swrite>:
 8003692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003696:	461f      	mov	r7, r3
 8003698:	898b      	ldrh	r3, [r1, #12]
 800369a:	05db      	lsls	r3, r3, #23
 800369c:	4605      	mov	r5, r0
 800369e:	460c      	mov	r4, r1
 80036a0:	4616      	mov	r6, r2
 80036a2:	d505      	bpl.n	80036b0 <__swrite+0x1e>
 80036a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a8:	2302      	movs	r3, #2
 80036aa:	2200      	movs	r2, #0
 80036ac:	f000 f8d0 	bl	8003850 <_lseek_r>
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036ba:	81a3      	strh	r3, [r4, #12]
 80036bc:	4632      	mov	r2, r6
 80036be:	463b      	mov	r3, r7
 80036c0:	4628      	mov	r0, r5
 80036c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036c6:	f000 b8e7 	b.w	8003898 <_write_r>

080036ca <__sseek>:
 80036ca:	b510      	push	{r4, lr}
 80036cc:	460c      	mov	r4, r1
 80036ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d2:	f000 f8bd 	bl	8003850 <_lseek_r>
 80036d6:	1c43      	adds	r3, r0, #1
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	bf15      	itete	ne
 80036dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80036de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80036e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80036e6:	81a3      	strheq	r3, [r4, #12]
 80036e8:	bf18      	it	ne
 80036ea:	81a3      	strhne	r3, [r4, #12]
 80036ec:	bd10      	pop	{r4, pc}

080036ee <__sclose>:
 80036ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f2:	f000 b89d 	b.w	8003830 <_close_r>

080036f6 <__swbuf_r>:
 80036f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f8:	460e      	mov	r6, r1
 80036fa:	4614      	mov	r4, r2
 80036fc:	4605      	mov	r5, r0
 80036fe:	b118      	cbz	r0, 8003708 <__swbuf_r+0x12>
 8003700:	6a03      	ldr	r3, [r0, #32]
 8003702:	b90b      	cbnz	r3, 8003708 <__swbuf_r+0x12>
 8003704:	f7ff ff06 	bl	8003514 <__sinit>
 8003708:	69a3      	ldr	r3, [r4, #24]
 800370a:	60a3      	str	r3, [r4, #8]
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	071a      	lsls	r2, r3, #28
 8003710:	d501      	bpl.n	8003716 <__swbuf_r+0x20>
 8003712:	6923      	ldr	r3, [r4, #16]
 8003714:	b943      	cbnz	r3, 8003728 <__swbuf_r+0x32>
 8003716:	4621      	mov	r1, r4
 8003718:	4628      	mov	r0, r5
 800371a:	f000 f82b 	bl	8003774 <__swsetup_r>
 800371e:	b118      	cbz	r0, 8003728 <__swbuf_r+0x32>
 8003720:	f04f 37ff 	mov.w	r7, #4294967295
 8003724:	4638      	mov	r0, r7
 8003726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	6922      	ldr	r2, [r4, #16]
 800372c:	1a98      	subs	r0, r3, r2
 800372e:	6963      	ldr	r3, [r4, #20]
 8003730:	b2f6      	uxtb	r6, r6
 8003732:	4283      	cmp	r3, r0
 8003734:	4637      	mov	r7, r6
 8003736:	dc05      	bgt.n	8003744 <__swbuf_r+0x4e>
 8003738:	4621      	mov	r1, r4
 800373a:	4628      	mov	r0, r5
 800373c:	f000 fd38 	bl	80041b0 <_fflush_r>
 8003740:	2800      	cmp	r0, #0
 8003742:	d1ed      	bne.n	8003720 <__swbuf_r+0x2a>
 8003744:	68a3      	ldr	r3, [r4, #8]
 8003746:	3b01      	subs	r3, #1
 8003748:	60a3      	str	r3, [r4, #8]
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	6022      	str	r2, [r4, #0]
 8003750:	701e      	strb	r6, [r3, #0]
 8003752:	6962      	ldr	r2, [r4, #20]
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	429a      	cmp	r2, r3
 8003758:	d004      	beq.n	8003764 <__swbuf_r+0x6e>
 800375a:	89a3      	ldrh	r3, [r4, #12]
 800375c:	07db      	lsls	r3, r3, #31
 800375e:	d5e1      	bpl.n	8003724 <__swbuf_r+0x2e>
 8003760:	2e0a      	cmp	r6, #10
 8003762:	d1df      	bne.n	8003724 <__swbuf_r+0x2e>
 8003764:	4621      	mov	r1, r4
 8003766:	4628      	mov	r0, r5
 8003768:	f000 fd22 	bl	80041b0 <_fflush_r>
 800376c:	2800      	cmp	r0, #0
 800376e:	d0d9      	beq.n	8003724 <__swbuf_r+0x2e>
 8003770:	e7d6      	b.n	8003720 <__swbuf_r+0x2a>
	...

08003774 <__swsetup_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	4b29      	ldr	r3, [pc, #164]	@ (800381c <__swsetup_r+0xa8>)
 8003778:	4605      	mov	r5, r0
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	460c      	mov	r4, r1
 800377e:	b118      	cbz	r0, 8003788 <__swsetup_r+0x14>
 8003780:	6a03      	ldr	r3, [r0, #32]
 8003782:	b90b      	cbnz	r3, 8003788 <__swsetup_r+0x14>
 8003784:	f7ff fec6 	bl	8003514 <__sinit>
 8003788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800378c:	0719      	lsls	r1, r3, #28
 800378e:	d422      	bmi.n	80037d6 <__swsetup_r+0x62>
 8003790:	06da      	lsls	r2, r3, #27
 8003792:	d407      	bmi.n	80037a4 <__swsetup_r+0x30>
 8003794:	2209      	movs	r2, #9
 8003796:	602a      	str	r2, [r5, #0]
 8003798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800379c:	81a3      	strh	r3, [r4, #12]
 800379e:	f04f 30ff 	mov.w	r0, #4294967295
 80037a2:	e033      	b.n	800380c <__swsetup_r+0x98>
 80037a4:	0758      	lsls	r0, r3, #29
 80037a6:	d512      	bpl.n	80037ce <__swsetup_r+0x5a>
 80037a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037aa:	b141      	cbz	r1, 80037be <__swsetup_r+0x4a>
 80037ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037b0:	4299      	cmp	r1, r3
 80037b2:	d002      	beq.n	80037ba <__swsetup_r+0x46>
 80037b4:	4628      	mov	r0, r5
 80037b6:	f000 f8af 	bl	8003918 <_free_r>
 80037ba:	2300      	movs	r3, #0
 80037bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80037be:	89a3      	ldrh	r3, [r4, #12]
 80037c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80037c4:	81a3      	strh	r3, [r4, #12]
 80037c6:	2300      	movs	r3, #0
 80037c8:	6063      	str	r3, [r4, #4]
 80037ca:	6923      	ldr	r3, [r4, #16]
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	89a3      	ldrh	r3, [r4, #12]
 80037d0:	f043 0308 	orr.w	r3, r3, #8
 80037d4:	81a3      	strh	r3, [r4, #12]
 80037d6:	6923      	ldr	r3, [r4, #16]
 80037d8:	b94b      	cbnz	r3, 80037ee <__swsetup_r+0x7a>
 80037da:	89a3      	ldrh	r3, [r4, #12]
 80037dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80037e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037e4:	d003      	beq.n	80037ee <__swsetup_r+0x7a>
 80037e6:	4621      	mov	r1, r4
 80037e8:	4628      	mov	r0, r5
 80037ea:	f000 fd2f 	bl	800424c <__smakebuf_r>
 80037ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037f2:	f013 0201 	ands.w	r2, r3, #1
 80037f6:	d00a      	beq.n	800380e <__swsetup_r+0x9a>
 80037f8:	2200      	movs	r2, #0
 80037fa:	60a2      	str	r2, [r4, #8]
 80037fc:	6962      	ldr	r2, [r4, #20]
 80037fe:	4252      	negs	r2, r2
 8003800:	61a2      	str	r2, [r4, #24]
 8003802:	6922      	ldr	r2, [r4, #16]
 8003804:	b942      	cbnz	r2, 8003818 <__swsetup_r+0xa4>
 8003806:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800380a:	d1c5      	bne.n	8003798 <__swsetup_r+0x24>
 800380c:	bd38      	pop	{r3, r4, r5, pc}
 800380e:	0799      	lsls	r1, r3, #30
 8003810:	bf58      	it	pl
 8003812:	6962      	ldrpl	r2, [r4, #20]
 8003814:	60a2      	str	r2, [r4, #8]
 8003816:	e7f4      	b.n	8003802 <__swsetup_r+0x8e>
 8003818:	2000      	movs	r0, #0
 800381a:	e7f7      	b.n	800380c <__swsetup_r+0x98>
 800381c:	20000020 	.word	0x20000020

08003820 <memset>:
 8003820:	4402      	add	r2, r0
 8003822:	4603      	mov	r3, r0
 8003824:	4293      	cmp	r3, r2
 8003826:	d100      	bne.n	800382a <memset+0xa>
 8003828:	4770      	bx	lr
 800382a:	f803 1b01 	strb.w	r1, [r3], #1
 800382e:	e7f9      	b.n	8003824 <memset+0x4>

08003830 <_close_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4d06      	ldr	r5, [pc, #24]	@ (800384c <_close_r+0x1c>)
 8003834:	2300      	movs	r3, #0
 8003836:	4604      	mov	r4, r0
 8003838:	4608      	mov	r0, r1
 800383a:	602b      	str	r3, [r5, #0]
 800383c:	f7fd fb18 	bl	8000e70 <_close>
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d102      	bne.n	800384a <_close_r+0x1a>
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	b103      	cbz	r3, 800384a <_close_r+0x1a>
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	20000360 	.word	0x20000360

08003850 <_lseek_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	4d07      	ldr	r5, [pc, #28]	@ (8003870 <_lseek_r+0x20>)
 8003854:	4604      	mov	r4, r0
 8003856:	4608      	mov	r0, r1
 8003858:	4611      	mov	r1, r2
 800385a:	2200      	movs	r2, #0
 800385c:	602a      	str	r2, [r5, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	f7fd fb2d 	bl	8000ebe <_lseek>
 8003864:	1c43      	adds	r3, r0, #1
 8003866:	d102      	bne.n	800386e <_lseek_r+0x1e>
 8003868:	682b      	ldr	r3, [r5, #0]
 800386a:	b103      	cbz	r3, 800386e <_lseek_r+0x1e>
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	bd38      	pop	{r3, r4, r5, pc}
 8003870:	20000360 	.word	0x20000360

08003874 <_read_r>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	4d07      	ldr	r5, [pc, #28]	@ (8003894 <_read_r+0x20>)
 8003878:	4604      	mov	r4, r0
 800387a:	4608      	mov	r0, r1
 800387c:	4611      	mov	r1, r2
 800387e:	2200      	movs	r2, #0
 8003880:	602a      	str	r2, [r5, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	f7fd fabb 	bl	8000dfe <_read>
 8003888:	1c43      	adds	r3, r0, #1
 800388a:	d102      	bne.n	8003892 <_read_r+0x1e>
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	b103      	cbz	r3, 8003892 <_read_r+0x1e>
 8003890:	6023      	str	r3, [r4, #0]
 8003892:	bd38      	pop	{r3, r4, r5, pc}
 8003894:	20000360 	.word	0x20000360

08003898 <_write_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4d07      	ldr	r5, [pc, #28]	@ (80038b8 <_write_r+0x20>)
 800389c:	4604      	mov	r4, r0
 800389e:	4608      	mov	r0, r1
 80038a0:	4611      	mov	r1, r2
 80038a2:	2200      	movs	r2, #0
 80038a4:	602a      	str	r2, [r5, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f7fd fac6 	bl	8000e38 <_write>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	d102      	bne.n	80038b6 <_write_r+0x1e>
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	b103      	cbz	r3, 80038b6 <_write_r+0x1e>
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	bd38      	pop	{r3, r4, r5, pc}
 80038b8:	20000360 	.word	0x20000360

080038bc <__errno>:
 80038bc:	4b01      	ldr	r3, [pc, #4]	@ (80038c4 <__errno+0x8>)
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000020 	.word	0x20000020

080038c8 <__libc_init_array>:
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	4d0d      	ldr	r5, [pc, #52]	@ (8003900 <__libc_init_array+0x38>)
 80038cc:	4c0d      	ldr	r4, [pc, #52]	@ (8003904 <__libc_init_array+0x3c>)
 80038ce:	1b64      	subs	r4, r4, r5
 80038d0:	10a4      	asrs	r4, r4, #2
 80038d2:	2600      	movs	r6, #0
 80038d4:	42a6      	cmp	r6, r4
 80038d6:	d109      	bne.n	80038ec <__libc_init_array+0x24>
 80038d8:	4d0b      	ldr	r5, [pc, #44]	@ (8003908 <__libc_init_array+0x40>)
 80038da:	4c0c      	ldr	r4, [pc, #48]	@ (800390c <__libc_init_array+0x44>)
 80038dc:	f000 fd58 	bl	8004390 <_init>
 80038e0:	1b64      	subs	r4, r4, r5
 80038e2:	10a4      	asrs	r4, r4, #2
 80038e4:	2600      	movs	r6, #0
 80038e6:	42a6      	cmp	r6, r4
 80038e8:	d105      	bne.n	80038f6 <__libc_init_array+0x2e>
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
 80038ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f0:	4798      	blx	r3
 80038f2:	3601      	adds	r6, #1
 80038f4:	e7ee      	b.n	80038d4 <__libc_init_array+0xc>
 80038f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038fa:	4798      	blx	r3
 80038fc:	3601      	adds	r6, #1
 80038fe:	e7f2      	b.n	80038e6 <__libc_init_array+0x1e>
 8003900:	080044ac 	.word	0x080044ac
 8003904:	080044ac 	.word	0x080044ac
 8003908:	080044ac 	.word	0x080044ac
 800390c:	080044b0 	.word	0x080044b0

08003910 <__retarget_lock_init_recursive>:
 8003910:	4770      	bx	lr

08003912 <__retarget_lock_acquire_recursive>:
 8003912:	4770      	bx	lr

08003914 <__retarget_lock_release_recursive>:
 8003914:	4770      	bx	lr
	...

08003918 <_free_r>:
 8003918:	b538      	push	{r3, r4, r5, lr}
 800391a:	4605      	mov	r5, r0
 800391c:	2900      	cmp	r1, #0
 800391e:	d041      	beq.n	80039a4 <_free_r+0x8c>
 8003920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003924:	1f0c      	subs	r4, r1, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	bfb8      	it	lt
 800392a:	18e4      	addlt	r4, r4, r3
 800392c:	f000 f8e0 	bl	8003af0 <__malloc_lock>
 8003930:	4a1d      	ldr	r2, [pc, #116]	@ (80039a8 <_free_r+0x90>)
 8003932:	6813      	ldr	r3, [r2, #0]
 8003934:	b933      	cbnz	r3, 8003944 <_free_r+0x2c>
 8003936:	6063      	str	r3, [r4, #4]
 8003938:	6014      	str	r4, [r2, #0]
 800393a:	4628      	mov	r0, r5
 800393c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003940:	f000 b8dc 	b.w	8003afc <__malloc_unlock>
 8003944:	42a3      	cmp	r3, r4
 8003946:	d908      	bls.n	800395a <_free_r+0x42>
 8003948:	6820      	ldr	r0, [r4, #0]
 800394a:	1821      	adds	r1, r4, r0
 800394c:	428b      	cmp	r3, r1
 800394e:	bf01      	itttt	eq
 8003950:	6819      	ldreq	r1, [r3, #0]
 8003952:	685b      	ldreq	r3, [r3, #4]
 8003954:	1809      	addeq	r1, r1, r0
 8003956:	6021      	streq	r1, [r4, #0]
 8003958:	e7ed      	b.n	8003936 <_free_r+0x1e>
 800395a:	461a      	mov	r2, r3
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	b10b      	cbz	r3, 8003964 <_free_r+0x4c>
 8003960:	42a3      	cmp	r3, r4
 8003962:	d9fa      	bls.n	800395a <_free_r+0x42>
 8003964:	6811      	ldr	r1, [r2, #0]
 8003966:	1850      	adds	r0, r2, r1
 8003968:	42a0      	cmp	r0, r4
 800396a:	d10b      	bne.n	8003984 <_free_r+0x6c>
 800396c:	6820      	ldr	r0, [r4, #0]
 800396e:	4401      	add	r1, r0
 8003970:	1850      	adds	r0, r2, r1
 8003972:	4283      	cmp	r3, r0
 8003974:	6011      	str	r1, [r2, #0]
 8003976:	d1e0      	bne.n	800393a <_free_r+0x22>
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	6053      	str	r3, [r2, #4]
 800397e:	4408      	add	r0, r1
 8003980:	6010      	str	r0, [r2, #0]
 8003982:	e7da      	b.n	800393a <_free_r+0x22>
 8003984:	d902      	bls.n	800398c <_free_r+0x74>
 8003986:	230c      	movs	r3, #12
 8003988:	602b      	str	r3, [r5, #0]
 800398a:	e7d6      	b.n	800393a <_free_r+0x22>
 800398c:	6820      	ldr	r0, [r4, #0]
 800398e:	1821      	adds	r1, r4, r0
 8003990:	428b      	cmp	r3, r1
 8003992:	bf04      	itt	eq
 8003994:	6819      	ldreq	r1, [r3, #0]
 8003996:	685b      	ldreq	r3, [r3, #4]
 8003998:	6063      	str	r3, [r4, #4]
 800399a:	bf04      	itt	eq
 800399c:	1809      	addeq	r1, r1, r0
 800399e:	6021      	streq	r1, [r4, #0]
 80039a0:	6054      	str	r4, [r2, #4]
 80039a2:	e7ca      	b.n	800393a <_free_r+0x22>
 80039a4:	bd38      	pop	{r3, r4, r5, pc}
 80039a6:	bf00      	nop
 80039a8:	2000036c 	.word	0x2000036c

080039ac <sbrk_aligned>:
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	4e0f      	ldr	r6, [pc, #60]	@ (80039ec <sbrk_aligned+0x40>)
 80039b0:	460c      	mov	r4, r1
 80039b2:	6831      	ldr	r1, [r6, #0]
 80039b4:	4605      	mov	r5, r0
 80039b6:	b911      	cbnz	r1, 80039be <sbrk_aligned+0x12>
 80039b8:	f000 fcda 	bl	8004370 <_sbrk_r>
 80039bc:	6030      	str	r0, [r6, #0]
 80039be:	4621      	mov	r1, r4
 80039c0:	4628      	mov	r0, r5
 80039c2:	f000 fcd5 	bl	8004370 <_sbrk_r>
 80039c6:	1c43      	adds	r3, r0, #1
 80039c8:	d103      	bne.n	80039d2 <sbrk_aligned+0x26>
 80039ca:	f04f 34ff 	mov.w	r4, #4294967295
 80039ce:	4620      	mov	r0, r4
 80039d0:	bd70      	pop	{r4, r5, r6, pc}
 80039d2:	1cc4      	adds	r4, r0, #3
 80039d4:	f024 0403 	bic.w	r4, r4, #3
 80039d8:	42a0      	cmp	r0, r4
 80039da:	d0f8      	beq.n	80039ce <sbrk_aligned+0x22>
 80039dc:	1a21      	subs	r1, r4, r0
 80039de:	4628      	mov	r0, r5
 80039e0:	f000 fcc6 	bl	8004370 <_sbrk_r>
 80039e4:	3001      	adds	r0, #1
 80039e6:	d1f2      	bne.n	80039ce <sbrk_aligned+0x22>
 80039e8:	e7ef      	b.n	80039ca <sbrk_aligned+0x1e>
 80039ea:	bf00      	nop
 80039ec:	20000368 	.word	0x20000368

080039f0 <_malloc_r>:
 80039f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f4:	1ccd      	adds	r5, r1, #3
 80039f6:	f025 0503 	bic.w	r5, r5, #3
 80039fa:	3508      	adds	r5, #8
 80039fc:	2d0c      	cmp	r5, #12
 80039fe:	bf38      	it	cc
 8003a00:	250c      	movcc	r5, #12
 8003a02:	2d00      	cmp	r5, #0
 8003a04:	4606      	mov	r6, r0
 8003a06:	db01      	blt.n	8003a0c <_malloc_r+0x1c>
 8003a08:	42a9      	cmp	r1, r5
 8003a0a:	d904      	bls.n	8003a16 <_malloc_r+0x26>
 8003a0c:	230c      	movs	r3, #12
 8003a0e:	6033      	str	r3, [r6, #0]
 8003a10:	2000      	movs	r0, #0
 8003a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003aec <_malloc_r+0xfc>
 8003a1a:	f000 f869 	bl	8003af0 <__malloc_lock>
 8003a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a22:	461c      	mov	r4, r3
 8003a24:	bb44      	cbnz	r4, 8003a78 <_malloc_r+0x88>
 8003a26:	4629      	mov	r1, r5
 8003a28:	4630      	mov	r0, r6
 8003a2a:	f7ff ffbf 	bl	80039ac <sbrk_aligned>
 8003a2e:	1c43      	adds	r3, r0, #1
 8003a30:	4604      	mov	r4, r0
 8003a32:	d158      	bne.n	8003ae6 <_malloc_r+0xf6>
 8003a34:	f8d8 4000 	ldr.w	r4, [r8]
 8003a38:	4627      	mov	r7, r4
 8003a3a:	2f00      	cmp	r7, #0
 8003a3c:	d143      	bne.n	8003ac6 <_malloc_r+0xd6>
 8003a3e:	2c00      	cmp	r4, #0
 8003a40:	d04b      	beq.n	8003ada <_malloc_r+0xea>
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	4639      	mov	r1, r7
 8003a46:	4630      	mov	r0, r6
 8003a48:	eb04 0903 	add.w	r9, r4, r3
 8003a4c:	f000 fc90 	bl	8004370 <_sbrk_r>
 8003a50:	4581      	cmp	r9, r0
 8003a52:	d142      	bne.n	8003ada <_malloc_r+0xea>
 8003a54:	6821      	ldr	r1, [r4, #0]
 8003a56:	1a6d      	subs	r5, r5, r1
 8003a58:	4629      	mov	r1, r5
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	f7ff ffa6 	bl	80039ac <sbrk_aligned>
 8003a60:	3001      	adds	r0, #1
 8003a62:	d03a      	beq.n	8003ada <_malloc_r+0xea>
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	442b      	add	r3, r5
 8003a68:	6023      	str	r3, [r4, #0]
 8003a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	bb62      	cbnz	r2, 8003acc <_malloc_r+0xdc>
 8003a72:	f8c8 7000 	str.w	r7, [r8]
 8003a76:	e00f      	b.n	8003a98 <_malloc_r+0xa8>
 8003a78:	6822      	ldr	r2, [r4, #0]
 8003a7a:	1b52      	subs	r2, r2, r5
 8003a7c:	d420      	bmi.n	8003ac0 <_malloc_r+0xd0>
 8003a7e:	2a0b      	cmp	r2, #11
 8003a80:	d917      	bls.n	8003ab2 <_malloc_r+0xc2>
 8003a82:	1961      	adds	r1, r4, r5
 8003a84:	42a3      	cmp	r3, r4
 8003a86:	6025      	str	r5, [r4, #0]
 8003a88:	bf18      	it	ne
 8003a8a:	6059      	strne	r1, [r3, #4]
 8003a8c:	6863      	ldr	r3, [r4, #4]
 8003a8e:	bf08      	it	eq
 8003a90:	f8c8 1000 	streq.w	r1, [r8]
 8003a94:	5162      	str	r2, [r4, r5]
 8003a96:	604b      	str	r3, [r1, #4]
 8003a98:	4630      	mov	r0, r6
 8003a9a:	f000 f82f 	bl	8003afc <__malloc_unlock>
 8003a9e:	f104 000b 	add.w	r0, r4, #11
 8003aa2:	1d23      	adds	r3, r4, #4
 8003aa4:	f020 0007 	bic.w	r0, r0, #7
 8003aa8:	1ac2      	subs	r2, r0, r3
 8003aaa:	bf1c      	itt	ne
 8003aac:	1a1b      	subne	r3, r3, r0
 8003aae:	50a3      	strne	r3, [r4, r2]
 8003ab0:	e7af      	b.n	8003a12 <_malloc_r+0x22>
 8003ab2:	6862      	ldr	r2, [r4, #4]
 8003ab4:	42a3      	cmp	r3, r4
 8003ab6:	bf0c      	ite	eq
 8003ab8:	f8c8 2000 	streq.w	r2, [r8]
 8003abc:	605a      	strne	r2, [r3, #4]
 8003abe:	e7eb      	b.n	8003a98 <_malloc_r+0xa8>
 8003ac0:	4623      	mov	r3, r4
 8003ac2:	6864      	ldr	r4, [r4, #4]
 8003ac4:	e7ae      	b.n	8003a24 <_malloc_r+0x34>
 8003ac6:	463c      	mov	r4, r7
 8003ac8:	687f      	ldr	r7, [r7, #4]
 8003aca:	e7b6      	b.n	8003a3a <_malloc_r+0x4a>
 8003acc:	461a      	mov	r2, r3
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	42a3      	cmp	r3, r4
 8003ad2:	d1fb      	bne.n	8003acc <_malloc_r+0xdc>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6053      	str	r3, [r2, #4]
 8003ad8:	e7de      	b.n	8003a98 <_malloc_r+0xa8>
 8003ada:	230c      	movs	r3, #12
 8003adc:	6033      	str	r3, [r6, #0]
 8003ade:	4630      	mov	r0, r6
 8003ae0:	f000 f80c 	bl	8003afc <__malloc_unlock>
 8003ae4:	e794      	b.n	8003a10 <_malloc_r+0x20>
 8003ae6:	6005      	str	r5, [r0, #0]
 8003ae8:	e7d6      	b.n	8003a98 <_malloc_r+0xa8>
 8003aea:	bf00      	nop
 8003aec:	2000036c 	.word	0x2000036c

08003af0 <__malloc_lock>:
 8003af0:	4801      	ldr	r0, [pc, #4]	@ (8003af8 <__malloc_lock+0x8>)
 8003af2:	f7ff bf0e 	b.w	8003912 <__retarget_lock_acquire_recursive>
 8003af6:	bf00      	nop
 8003af8:	20000364 	.word	0x20000364

08003afc <__malloc_unlock>:
 8003afc:	4801      	ldr	r0, [pc, #4]	@ (8003b04 <__malloc_unlock+0x8>)
 8003afe:	f7ff bf09 	b.w	8003914 <__retarget_lock_release_recursive>
 8003b02:	bf00      	nop
 8003b04:	20000364 	.word	0x20000364

08003b08 <__sfputc_r>:
 8003b08:	6893      	ldr	r3, [r2, #8]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	b410      	push	{r4}
 8003b10:	6093      	str	r3, [r2, #8]
 8003b12:	da08      	bge.n	8003b26 <__sfputc_r+0x1e>
 8003b14:	6994      	ldr	r4, [r2, #24]
 8003b16:	42a3      	cmp	r3, r4
 8003b18:	db01      	blt.n	8003b1e <__sfputc_r+0x16>
 8003b1a:	290a      	cmp	r1, #10
 8003b1c:	d103      	bne.n	8003b26 <__sfputc_r+0x1e>
 8003b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b22:	f7ff bde8 	b.w	80036f6 <__swbuf_r>
 8003b26:	6813      	ldr	r3, [r2, #0]
 8003b28:	1c58      	adds	r0, r3, #1
 8003b2a:	6010      	str	r0, [r2, #0]
 8003b2c:	7019      	strb	r1, [r3, #0]
 8003b2e:	4608      	mov	r0, r1
 8003b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <__sfputs_r>:
 8003b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b38:	4606      	mov	r6, r0
 8003b3a:	460f      	mov	r7, r1
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	18d5      	adds	r5, r2, r3
 8003b40:	42ac      	cmp	r4, r5
 8003b42:	d101      	bne.n	8003b48 <__sfputs_r+0x12>
 8003b44:	2000      	movs	r0, #0
 8003b46:	e007      	b.n	8003b58 <__sfputs_r+0x22>
 8003b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b4c:	463a      	mov	r2, r7
 8003b4e:	4630      	mov	r0, r6
 8003b50:	f7ff ffda 	bl	8003b08 <__sfputc_r>
 8003b54:	1c43      	adds	r3, r0, #1
 8003b56:	d1f3      	bne.n	8003b40 <__sfputs_r+0xa>
 8003b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b5c <_vfiprintf_r>:
 8003b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b60:	460d      	mov	r5, r1
 8003b62:	b09d      	sub	sp, #116	@ 0x74
 8003b64:	4614      	mov	r4, r2
 8003b66:	4698      	mov	r8, r3
 8003b68:	4606      	mov	r6, r0
 8003b6a:	b118      	cbz	r0, 8003b74 <_vfiprintf_r+0x18>
 8003b6c:	6a03      	ldr	r3, [r0, #32]
 8003b6e:	b90b      	cbnz	r3, 8003b74 <_vfiprintf_r+0x18>
 8003b70:	f7ff fcd0 	bl	8003514 <__sinit>
 8003b74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b76:	07d9      	lsls	r1, r3, #31
 8003b78:	d405      	bmi.n	8003b86 <_vfiprintf_r+0x2a>
 8003b7a:	89ab      	ldrh	r3, [r5, #12]
 8003b7c:	059a      	lsls	r2, r3, #22
 8003b7e:	d402      	bmi.n	8003b86 <_vfiprintf_r+0x2a>
 8003b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b82:	f7ff fec6 	bl	8003912 <__retarget_lock_acquire_recursive>
 8003b86:	89ab      	ldrh	r3, [r5, #12]
 8003b88:	071b      	lsls	r3, r3, #28
 8003b8a:	d501      	bpl.n	8003b90 <_vfiprintf_r+0x34>
 8003b8c:	692b      	ldr	r3, [r5, #16]
 8003b8e:	b99b      	cbnz	r3, 8003bb8 <_vfiprintf_r+0x5c>
 8003b90:	4629      	mov	r1, r5
 8003b92:	4630      	mov	r0, r6
 8003b94:	f7ff fdee 	bl	8003774 <__swsetup_r>
 8003b98:	b170      	cbz	r0, 8003bb8 <_vfiprintf_r+0x5c>
 8003b9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b9c:	07dc      	lsls	r4, r3, #31
 8003b9e:	d504      	bpl.n	8003baa <_vfiprintf_r+0x4e>
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba4:	b01d      	add	sp, #116	@ 0x74
 8003ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003baa:	89ab      	ldrh	r3, [r5, #12]
 8003bac:	0598      	lsls	r0, r3, #22
 8003bae:	d4f7      	bmi.n	8003ba0 <_vfiprintf_r+0x44>
 8003bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bb2:	f7ff feaf 	bl	8003914 <__retarget_lock_release_recursive>
 8003bb6:	e7f3      	b.n	8003ba0 <_vfiprintf_r+0x44>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bc6:	2330      	movs	r3, #48	@ 0x30
 8003bc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003d78 <_vfiprintf_r+0x21c>
 8003bcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003bd0:	f04f 0901 	mov.w	r9, #1
 8003bd4:	4623      	mov	r3, r4
 8003bd6:	469a      	mov	sl, r3
 8003bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bdc:	b10a      	cbz	r2, 8003be2 <_vfiprintf_r+0x86>
 8003bde:	2a25      	cmp	r2, #37	@ 0x25
 8003be0:	d1f9      	bne.n	8003bd6 <_vfiprintf_r+0x7a>
 8003be2:	ebba 0b04 	subs.w	fp, sl, r4
 8003be6:	d00b      	beq.n	8003c00 <_vfiprintf_r+0xa4>
 8003be8:	465b      	mov	r3, fp
 8003bea:	4622      	mov	r2, r4
 8003bec:	4629      	mov	r1, r5
 8003bee:	4630      	mov	r0, r6
 8003bf0:	f7ff ffa1 	bl	8003b36 <__sfputs_r>
 8003bf4:	3001      	adds	r0, #1
 8003bf6:	f000 80a7 	beq.w	8003d48 <_vfiprintf_r+0x1ec>
 8003bfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bfc:	445a      	add	r2, fp
 8003bfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c00:	f89a 3000 	ldrb.w	r3, [sl]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 809f 	beq.w	8003d48 <_vfiprintf_r+0x1ec>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c14:	f10a 0a01 	add.w	sl, sl, #1
 8003c18:	9304      	str	r3, [sp, #16]
 8003c1a:	9307      	str	r3, [sp, #28]
 8003c1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c20:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c22:	4654      	mov	r4, sl
 8003c24:	2205      	movs	r2, #5
 8003c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c2a:	4853      	ldr	r0, [pc, #332]	@ (8003d78 <_vfiprintf_r+0x21c>)
 8003c2c:	f7fc fad8 	bl	80001e0 <memchr>
 8003c30:	9a04      	ldr	r2, [sp, #16]
 8003c32:	b9d8      	cbnz	r0, 8003c6c <_vfiprintf_r+0x110>
 8003c34:	06d1      	lsls	r1, r2, #27
 8003c36:	bf44      	itt	mi
 8003c38:	2320      	movmi	r3, #32
 8003c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c3e:	0713      	lsls	r3, r2, #28
 8003c40:	bf44      	itt	mi
 8003c42:	232b      	movmi	r3, #43	@ 0x2b
 8003c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c48:	f89a 3000 	ldrb.w	r3, [sl]
 8003c4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c4e:	d015      	beq.n	8003c7c <_vfiprintf_r+0x120>
 8003c50:	9a07      	ldr	r2, [sp, #28]
 8003c52:	4654      	mov	r4, sl
 8003c54:	2000      	movs	r0, #0
 8003c56:	f04f 0c0a 	mov.w	ip, #10
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c60:	3b30      	subs	r3, #48	@ 0x30
 8003c62:	2b09      	cmp	r3, #9
 8003c64:	d94b      	bls.n	8003cfe <_vfiprintf_r+0x1a2>
 8003c66:	b1b0      	cbz	r0, 8003c96 <_vfiprintf_r+0x13a>
 8003c68:	9207      	str	r2, [sp, #28]
 8003c6a:	e014      	b.n	8003c96 <_vfiprintf_r+0x13a>
 8003c6c:	eba0 0308 	sub.w	r3, r0, r8
 8003c70:	fa09 f303 	lsl.w	r3, r9, r3
 8003c74:	4313      	orrs	r3, r2
 8003c76:	9304      	str	r3, [sp, #16]
 8003c78:	46a2      	mov	sl, r4
 8003c7a:	e7d2      	b.n	8003c22 <_vfiprintf_r+0xc6>
 8003c7c:	9b03      	ldr	r3, [sp, #12]
 8003c7e:	1d19      	adds	r1, r3, #4
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	9103      	str	r1, [sp, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bfbb      	ittet	lt
 8003c88:	425b      	neglt	r3, r3
 8003c8a:	f042 0202 	orrlt.w	r2, r2, #2
 8003c8e:	9307      	strge	r3, [sp, #28]
 8003c90:	9307      	strlt	r3, [sp, #28]
 8003c92:	bfb8      	it	lt
 8003c94:	9204      	strlt	r2, [sp, #16]
 8003c96:	7823      	ldrb	r3, [r4, #0]
 8003c98:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c9a:	d10a      	bne.n	8003cb2 <_vfiprintf_r+0x156>
 8003c9c:	7863      	ldrb	r3, [r4, #1]
 8003c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ca0:	d132      	bne.n	8003d08 <_vfiprintf_r+0x1ac>
 8003ca2:	9b03      	ldr	r3, [sp, #12]
 8003ca4:	1d1a      	adds	r2, r3, #4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	9203      	str	r2, [sp, #12]
 8003caa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cae:	3402      	adds	r4, #2
 8003cb0:	9305      	str	r3, [sp, #20]
 8003cb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003d88 <_vfiprintf_r+0x22c>
 8003cb6:	7821      	ldrb	r1, [r4, #0]
 8003cb8:	2203      	movs	r2, #3
 8003cba:	4650      	mov	r0, sl
 8003cbc:	f7fc fa90 	bl	80001e0 <memchr>
 8003cc0:	b138      	cbz	r0, 8003cd2 <_vfiprintf_r+0x176>
 8003cc2:	9b04      	ldr	r3, [sp, #16]
 8003cc4:	eba0 000a 	sub.w	r0, r0, sl
 8003cc8:	2240      	movs	r2, #64	@ 0x40
 8003cca:	4082      	lsls	r2, r0
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	3401      	adds	r4, #1
 8003cd0:	9304      	str	r3, [sp, #16]
 8003cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd6:	4829      	ldr	r0, [pc, #164]	@ (8003d7c <_vfiprintf_r+0x220>)
 8003cd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003cdc:	2206      	movs	r2, #6
 8003cde:	f7fc fa7f 	bl	80001e0 <memchr>
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d03f      	beq.n	8003d66 <_vfiprintf_r+0x20a>
 8003ce6:	4b26      	ldr	r3, [pc, #152]	@ (8003d80 <_vfiprintf_r+0x224>)
 8003ce8:	bb1b      	cbnz	r3, 8003d32 <_vfiprintf_r+0x1d6>
 8003cea:	9b03      	ldr	r3, [sp, #12]
 8003cec:	3307      	adds	r3, #7
 8003cee:	f023 0307 	bic.w	r3, r3, #7
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	9303      	str	r3, [sp, #12]
 8003cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cf8:	443b      	add	r3, r7
 8003cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cfc:	e76a      	b.n	8003bd4 <_vfiprintf_r+0x78>
 8003cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d02:	460c      	mov	r4, r1
 8003d04:	2001      	movs	r0, #1
 8003d06:	e7a8      	b.n	8003c5a <_vfiprintf_r+0xfe>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	3401      	adds	r4, #1
 8003d0c:	9305      	str	r3, [sp, #20]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	f04f 0c0a 	mov.w	ip, #10
 8003d14:	4620      	mov	r0, r4
 8003d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d1a:	3a30      	subs	r2, #48	@ 0x30
 8003d1c:	2a09      	cmp	r2, #9
 8003d1e:	d903      	bls.n	8003d28 <_vfiprintf_r+0x1cc>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0c6      	beq.n	8003cb2 <_vfiprintf_r+0x156>
 8003d24:	9105      	str	r1, [sp, #20]
 8003d26:	e7c4      	b.n	8003cb2 <_vfiprintf_r+0x156>
 8003d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e7f0      	b.n	8003d14 <_vfiprintf_r+0x1b8>
 8003d32:	ab03      	add	r3, sp, #12
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	462a      	mov	r2, r5
 8003d38:	4b12      	ldr	r3, [pc, #72]	@ (8003d84 <_vfiprintf_r+0x228>)
 8003d3a:	a904      	add	r1, sp, #16
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f3af 8000 	nop.w
 8003d42:	4607      	mov	r7, r0
 8003d44:	1c78      	adds	r0, r7, #1
 8003d46:	d1d6      	bne.n	8003cf6 <_vfiprintf_r+0x19a>
 8003d48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d4a:	07d9      	lsls	r1, r3, #31
 8003d4c:	d405      	bmi.n	8003d5a <_vfiprintf_r+0x1fe>
 8003d4e:	89ab      	ldrh	r3, [r5, #12]
 8003d50:	059a      	lsls	r2, r3, #22
 8003d52:	d402      	bmi.n	8003d5a <_vfiprintf_r+0x1fe>
 8003d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d56:	f7ff fddd 	bl	8003914 <__retarget_lock_release_recursive>
 8003d5a:	89ab      	ldrh	r3, [r5, #12]
 8003d5c:	065b      	lsls	r3, r3, #25
 8003d5e:	f53f af1f 	bmi.w	8003ba0 <_vfiprintf_r+0x44>
 8003d62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d64:	e71e      	b.n	8003ba4 <_vfiprintf_r+0x48>
 8003d66:	ab03      	add	r3, sp, #12
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	462a      	mov	r2, r5
 8003d6c:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <_vfiprintf_r+0x228>)
 8003d6e:	a904      	add	r1, sp, #16
 8003d70:	4630      	mov	r0, r6
 8003d72:	f000 f879 	bl	8003e68 <_printf_i>
 8003d76:	e7e4      	b.n	8003d42 <_vfiprintf_r+0x1e6>
 8003d78:	08004470 	.word	0x08004470
 8003d7c:	0800447a 	.word	0x0800447a
 8003d80:	00000000 	.word	0x00000000
 8003d84:	08003b37 	.word	0x08003b37
 8003d88:	08004476 	.word	0x08004476

08003d8c <_printf_common>:
 8003d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d90:	4616      	mov	r6, r2
 8003d92:	4698      	mov	r8, r3
 8003d94:	688a      	ldr	r2, [r1, #8]
 8003d96:	690b      	ldr	r3, [r1, #16]
 8003d98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	bfb8      	it	lt
 8003da0:	4613      	movlt	r3, r2
 8003da2:	6033      	str	r3, [r6, #0]
 8003da4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003da8:	4607      	mov	r7, r0
 8003daa:	460c      	mov	r4, r1
 8003dac:	b10a      	cbz	r2, 8003db2 <_printf_common+0x26>
 8003dae:	3301      	adds	r3, #1
 8003db0:	6033      	str	r3, [r6, #0]
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	0699      	lsls	r1, r3, #26
 8003db6:	bf42      	ittt	mi
 8003db8:	6833      	ldrmi	r3, [r6, #0]
 8003dba:	3302      	addmi	r3, #2
 8003dbc:	6033      	strmi	r3, [r6, #0]
 8003dbe:	6825      	ldr	r5, [r4, #0]
 8003dc0:	f015 0506 	ands.w	r5, r5, #6
 8003dc4:	d106      	bne.n	8003dd4 <_printf_common+0x48>
 8003dc6:	f104 0a19 	add.w	sl, r4, #25
 8003dca:	68e3      	ldr	r3, [r4, #12]
 8003dcc:	6832      	ldr	r2, [r6, #0]
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	42ab      	cmp	r3, r5
 8003dd2:	dc26      	bgt.n	8003e22 <_printf_common+0x96>
 8003dd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003dd8:	6822      	ldr	r2, [r4, #0]
 8003dda:	3b00      	subs	r3, #0
 8003ddc:	bf18      	it	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	0692      	lsls	r2, r2, #26
 8003de2:	d42b      	bmi.n	8003e3c <_printf_common+0xb0>
 8003de4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003de8:	4641      	mov	r1, r8
 8003dea:	4638      	mov	r0, r7
 8003dec:	47c8      	blx	r9
 8003dee:	3001      	adds	r0, #1
 8003df0:	d01e      	beq.n	8003e30 <_printf_common+0xa4>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	6922      	ldr	r2, [r4, #16]
 8003df6:	f003 0306 	and.w	r3, r3, #6
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	bf02      	ittt	eq
 8003dfe:	68e5      	ldreq	r5, [r4, #12]
 8003e00:	6833      	ldreq	r3, [r6, #0]
 8003e02:	1aed      	subeq	r5, r5, r3
 8003e04:	68a3      	ldr	r3, [r4, #8]
 8003e06:	bf0c      	ite	eq
 8003e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e0c:	2500      	movne	r5, #0
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	bfc4      	itt	gt
 8003e12:	1a9b      	subgt	r3, r3, r2
 8003e14:	18ed      	addgt	r5, r5, r3
 8003e16:	2600      	movs	r6, #0
 8003e18:	341a      	adds	r4, #26
 8003e1a:	42b5      	cmp	r5, r6
 8003e1c:	d11a      	bne.n	8003e54 <_printf_common+0xc8>
 8003e1e:	2000      	movs	r0, #0
 8003e20:	e008      	b.n	8003e34 <_printf_common+0xa8>
 8003e22:	2301      	movs	r3, #1
 8003e24:	4652      	mov	r2, sl
 8003e26:	4641      	mov	r1, r8
 8003e28:	4638      	mov	r0, r7
 8003e2a:	47c8      	blx	r9
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	d103      	bne.n	8003e38 <_printf_common+0xac>
 8003e30:	f04f 30ff 	mov.w	r0, #4294967295
 8003e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e38:	3501      	adds	r5, #1
 8003e3a:	e7c6      	b.n	8003dca <_printf_common+0x3e>
 8003e3c:	18e1      	adds	r1, r4, r3
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	2030      	movs	r0, #48	@ 0x30
 8003e42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e46:	4422      	add	r2, r4
 8003e48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e50:	3302      	adds	r3, #2
 8003e52:	e7c7      	b.n	8003de4 <_printf_common+0x58>
 8003e54:	2301      	movs	r3, #1
 8003e56:	4622      	mov	r2, r4
 8003e58:	4641      	mov	r1, r8
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	47c8      	blx	r9
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d0e6      	beq.n	8003e30 <_printf_common+0xa4>
 8003e62:	3601      	adds	r6, #1
 8003e64:	e7d9      	b.n	8003e1a <_printf_common+0x8e>
	...

08003e68 <_printf_i>:
 8003e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e6c:	7e0f      	ldrb	r7, [r1, #24]
 8003e6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e70:	2f78      	cmp	r7, #120	@ 0x78
 8003e72:	4691      	mov	r9, r2
 8003e74:	4680      	mov	r8, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	469a      	mov	sl, r3
 8003e7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e7e:	d807      	bhi.n	8003e90 <_printf_i+0x28>
 8003e80:	2f62      	cmp	r7, #98	@ 0x62
 8003e82:	d80a      	bhi.n	8003e9a <_printf_i+0x32>
 8003e84:	2f00      	cmp	r7, #0
 8003e86:	f000 80d2 	beq.w	800402e <_printf_i+0x1c6>
 8003e8a:	2f58      	cmp	r7, #88	@ 0x58
 8003e8c:	f000 80b9 	beq.w	8004002 <_printf_i+0x19a>
 8003e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e98:	e03a      	b.n	8003f10 <_printf_i+0xa8>
 8003e9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e9e:	2b15      	cmp	r3, #21
 8003ea0:	d8f6      	bhi.n	8003e90 <_printf_i+0x28>
 8003ea2:	a101      	add	r1, pc, #4	@ (adr r1, 8003ea8 <_printf_i+0x40>)
 8003ea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ea8:	08003f01 	.word	0x08003f01
 8003eac:	08003f15 	.word	0x08003f15
 8003eb0:	08003e91 	.word	0x08003e91
 8003eb4:	08003e91 	.word	0x08003e91
 8003eb8:	08003e91 	.word	0x08003e91
 8003ebc:	08003e91 	.word	0x08003e91
 8003ec0:	08003f15 	.word	0x08003f15
 8003ec4:	08003e91 	.word	0x08003e91
 8003ec8:	08003e91 	.word	0x08003e91
 8003ecc:	08003e91 	.word	0x08003e91
 8003ed0:	08003e91 	.word	0x08003e91
 8003ed4:	08004015 	.word	0x08004015
 8003ed8:	08003f3f 	.word	0x08003f3f
 8003edc:	08003fcf 	.word	0x08003fcf
 8003ee0:	08003e91 	.word	0x08003e91
 8003ee4:	08003e91 	.word	0x08003e91
 8003ee8:	08004037 	.word	0x08004037
 8003eec:	08003e91 	.word	0x08003e91
 8003ef0:	08003f3f 	.word	0x08003f3f
 8003ef4:	08003e91 	.word	0x08003e91
 8003ef8:	08003e91 	.word	0x08003e91
 8003efc:	08003fd7 	.word	0x08003fd7
 8003f00:	6833      	ldr	r3, [r6, #0]
 8003f02:	1d1a      	adds	r2, r3, #4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6032      	str	r2, [r6, #0]
 8003f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f10:	2301      	movs	r3, #1
 8003f12:	e09d      	b.n	8004050 <_printf_i+0x1e8>
 8003f14:	6833      	ldr	r3, [r6, #0]
 8003f16:	6820      	ldr	r0, [r4, #0]
 8003f18:	1d19      	adds	r1, r3, #4
 8003f1a:	6031      	str	r1, [r6, #0]
 8003f1c:	0606      	lsls	r6, r0, #24
 8003f1e:	d501      	bpl.n	8003f24 <_printf_i+0xbc>
 8003f20:	681d      	ldr	r5, [r3, #0]
 8003f22:	e003      	b.n	8003f2c <_printf_i+0xc4>
 8003f24:	0645      	lsls	r5, r0, #25
 8003f26:	d5fb      	bpl.n	8003f20 <_printf_i+0xb8>
 8003f28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f2c:	2d00      	cmp	r5, #0
 8003f2e:	da03      	bge.n	8003f38 <_printf_i+0xd0>
 8003f30:	232d      	movs	r3, #45	@ 0x2d
 8003f32:	426d      	negs	r5, r5
 8003f34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f38:	4859      	ldr	r0, [pc, #356]	@ (80040a0 <_printf_i+0x238>)
 8003f3a:	230a      	movs	r3, #10
 8003f3c:	e011      	b.n	8003f62 <_printf_i+0xfa>
 8003f3e:	6821      	ldr	r1, [r4, #0]
 8003f40:	6833      	ldr	r3, [r6, #0]
 8003f42:	0608      	lsls	r0, r1, #24
 8003f44:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f48:	d402      	bmi.n	8003f50 <_printf_i+0xe8>
 8003f4a:	0649      	lsls	r1, r1, #25
 8003f4c:	bf48      	it	mi
 8003f4e:	b2ad      	uxthmi	r5, r5
 8003f50:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f52:	4853      	ldr	r0, [pc, #332]	@ (80040a0 <_printf_i+0x238>)
 8003f54:	6033      	str	r3, [r6, #0]
 8003f56:	bf14      	ite	ne
 8003f58:	230a      	movne	r3, #10
 8003f5a:	2308      	moveq	r3, #8
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f62:	6866      	ldr	r6, [r4, #4]
 8003f64:	60a6      	str	r6, [r4, #8]
 8003f66:	2e00      	cmp	r6, #0
 8003f68:	bfa2      	ittt	ge
 8003f6a:	6821      	ldrge	r1, [r4, #0]
 8003f6c:	f021 0104 	bicge.w	r1, r1, #4
 8003f70:	6021      	strge	r1, [r4, #0]
 8003f72:	b90d      	cbnz	r5, 8003f78 <_printf_i+0x110>
 8003f74:	2e00      	cmp	r6, #0
 8003f76:	d04b      	beq.n	8004010 <_printf_i+0x1a8>
 8003f78:	4616      	mov	r6, r2
 8003f7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f7e:	fb03 5711 	mls	r7, r3, r1, r5
 8003f82:	5dc7      	ldrb	r7, [r0, r7]
 8003f84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f88:	462f      	mov	r7, r5
 8003f8a:	42bb      	cmp	r3, r7
 8003f8c:	460d      	mov	r5, r1
 8003f8e:	d9f4      	bls.n	8003f7a <_printf_i+0x112>
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d10b      	bne.n	8003fac <_printf_i+0x144>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	07df      	lsls	r7, r3, #31
 8003f98:	d508      	bpl.n	8003fac <_printf_i+0x144>
 8003f9a:	6923      	ldr	r3, [r4, #16]
 8003f9c:	6861      	ldr	r1, [r4, #4]
 8003f9e:	4299      	cmp	r1, r3
 8003fa0:	bfde      	ittt	le
 8003fa2:	2330      	movle	r3, #48	@ 0x30
 8003fa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fa8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fac:	1b92      	subs	r2, r2, r6
 8003fae:	6122      	str	r2, [r4, #16]
 8003fb0:	f8cd a000 	str.w	sl, [sp]
 8003fb4:	464b      	mov	r3, r9
 8003fb6:	aa03      	add	r2, sp, #12
 8003fb8:	4621      	mov	r1, r4
 8003fba:	4640      	mov	r0, r8
 8003fbc:	f7ff fee6 	bl	8003d8c <_printf_common>
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d14a      	bne.n	800405a <_printf_i+0x1f2>
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	b004      	add	sp, #16
 8003fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	f043 0320 	orr.w	r3, r3, #32
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	4833      	ldr	r0, [pc, #204]	@ (80040a4 <_printf_i+0x23c>)
 8003fd8:	2778      	movs	r7, #120	@ 0x78
 8003fda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	6831      	ldr	r1, [r6, #0]
 8003fe2:	061f      	lsls	r7, r3, #24
 8003fe4:	f851 5b04 	ldr.w	r5, [r1], #4
 8003fe8:	d402      	bmi.n	8003ff0 <_printf_i+0x188>
 8003fea:	065f      	lsls	r7, r3, #25
 8003fec:	bf48      	it	mi
 8003fee:	b2ad      	uxthmi	r5, r5
 8003ff0:	6031      	str	r1, [r6, #0]
 8003ff2:	07d9      	lsls	r1, r3, #31
 8003ff4:	bf44      	itt	mi
 8003ff6:	f043 0320 	orrmi.w	r3, r3, #32
 8003ffa:	6023      	strmi	r3, [r4, #0]
 8003ffc:	b11d      	cbz	r5, 8004006 <_printf_i+0x19e>
 8003ffe:	2310      	movs	r3, #16
 8004000:	e7ac      	b.n	8003f5c <_printf_i+0xf4>
 8004002:	4827      	ldr	r0, [pc, #156]	@ (80040a0 <_printf_i+0x238>)
 8004004:	e7e9      	b.n	8003fda <_printf_i+0x172>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	f023 0320 	bic.w	r3, r3, #32
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	e7f6      	b.n	8003ffe <_printf_i+0x196>
 8004010:	4616      	mov	r6, r2
 8004012:	e7bd      	b.n	8003f90 <_printf_i+0x128>
 8004014:	6833      	ldr	r3, [r6, #0]
 8004016:	6825      	ldr	r5, [r4, #0]
 8004018:	6961      	ldr	r1, [r4, #20]
 800401a:	1d18      	adds	r0, r3, #4
 800401c:	6030      	str	r0, [r6, #0]
 800401e:	062e      	lsls	r6, r5, #24
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	d501      	bpl.n	8004028 <_printf_i+0x1c0>
 8004024:	6019      	str	r1, [r3, #0]
 8004026:	e002      	b.n	800402e <_printf_i+0x1c6>
 8004028:	0668      	lsls	r0, r5, #25
 800402a:	d5fb      	bpl.n	8004024 <_printf_i+0x1bc>
 800402c:	8019      	strh	r1, [r3, #0]
 800402e:	2300      	movs	r3, #0
 8004030:	6123      	str	r3, [r4, #16]
 8004032:	4616      	mov	r6, r2
 8004034:	e7bc      	b.n	8003fb0 <_printf_i+0x148>
 8004036:	6833      	ldr	r3, [r6, #0]
 8004038:	1d1a      	adds	r2, r3, #4
 800403a:	6032      	str	r2, [r6, #0]
 800403c:	681e      	ldr	r6, [r3, #0]
 800403e:	6862      	ldr	r2, [r4, #4]
 8004040:	2100      	movs	r1, #0
 8004042:	4630      	mov	r0, r6
 8004044:	f7fc f8cc 	bl	80001e0 <memchr>
 8004048:	b108      	cbz	r0, 800404e <_printf_i+0x1e6>
 800404a:	1b80      	subs	r0, r0, r6
 800404c:	6060      	str	r0, [r4, #4]
 800404e:	6863      	ldr	r3, [r4, #4]
 8004050:	6123      	str	r3, [r4, #16]
 8004052:	2300      	movs	r3, #0
 8004054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004058:	e7aa      	b.n	8003fb0 <_printf_i+0x148>
 800405a:	6923      	ldr	r3, [r4, #16]
 800405c:	4632      	mov	r2, r6
 800405e:	4649      	mov	r1, r9
 8004060:	4640      	mov	r0, r8
 8004062:	47d0      	blx	sl
 8004064:	3001      	adds	r0, #1
 8004066:	d0ad      	beq.n	8003fc4 <_printf_i+0x15c>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	079b      	lsls	r3, r3, #30
 800406c:	d413      	bmi.n	8004096 <_printf_i+0x22e>
 800406e:	68e0      	ldr	r0, [r4, #12]
 8004070:	9b03      	ldr	r3, [sp, #12]
 8004072:	4298      	cmp	r0, r3
 8004074:	bfb8      	it	lt
 8004076:	4618      	movlt	r0, r3
 8004078:	e7a6      	b.n	8003fc8 <_printf_i+0x160>
 800407a:	2301      	movs	r3, #1
 800407c:	4632      	mov	r2, r6
 800407e:	4649      	mov	r1, r9
 8004080:	4640      	mov	r0, r8
 8004082:	47d0      	blx	sl
 8004084:	3001      	adds	r0, #1
 8004086:	d09d      	beq.n	8003fc4 <_printf_i+0x15c>
 8004088:	3501      	adds	r5, #1
 800408a:	68e3      	ldr	r3, [r4, #12]
 800408c:	9903      	ldr	r1, [sp, #12]
 800408e:	1a5b      	subs	r3, r3, r1
 8004090:	42ab      	cmp	r3, r5
 8004092:	dcf2      	bgt.n	800407a <_printf_i+0x212>
 8004094:	e7eb      	b.n	800406e <_printf_i+0x206>
 8004096:	2500      	movs	r5, #0
 8004098:	f104 0619 	add.w	r6, r4, #25
 800409c:	e7f5      	b.n	800408a <_printf_i+0x222>
 800409e:	bf00      	nop
 80040a0:	08004481 	.word	0x08004481
 80040a4:	08004492 	.word	0x08004492

080040a8 <__sflush_r>:
 80040a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b0:	0716      	lsls	r6, r2, #28
 80040b2:	4605      	mov	r5, r0
 80040b4:	460c      	mov	r4, r1
 80040b6:	d454      	bmi.n	8004162 <__sflush_r+0xba>
 80040b8:	684b      	ldr	r3, [r1, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	dc02      	bgt.n	80040c4 <__sflush_r+0x1c>
 80040be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	dd48      	ble.n	8004156 <__sflush_r+0xae>
 80040c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80040c6:	2e00      	cmp	r6, #0
 80040c8:	d045      	beq.n	8004156 <__sflush_r+0xae>
 80040ca:	2300      	movs	r3, #0
 80040cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80040d0:	682f      	ldr	r7, [r5, #0]
 80040d2:	6a21      	ldr	r1, [r4, #32]
 80040d4:	602b      	str	r3, [r5, #0]
 80040d6:	d030      	beq.n	800413a <__sflush_r+0x92>
 80040d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	0759      	lsls	r1, r3, #29
 80040de:	d505      	bpl.n	80040ec <__sflush_r+0x44>
 80040e0:	6863      	ldr	r3, [r4, #4]
 80040e2:	1ad2      	subs	r2, r2, r3
 80040e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80040e6:	b10b      	cbz	r3, 80040ec <__sflush_r+0x44>
 80040e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80040ea:	1ad2      	subs	r2, r2, r3
 80040ec:	2300      	movs	r3, #0
 80040ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80040f0:	6a21      	ldr	r1, [r4, #32]
 80040f2:	4628      	mov	r0, r5
 80040f4:	47b0      	blx	r6
 80040f6:	1c43      	adds	r3, r0, #1
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	d106      	bne.n	800410a <__sflush_r+0x62>
 80040fc:	6829      	ldr	r1, [r5, #0]
 80040fe:	291d      	cmp	r1, #29
 8004100:	d82b      	bhi.n	800415a <__sflush_r+0xb2>
 8004102:	4a2a      	ldr	r2, [pc, #168]	@ (80041ac <__sflush_r+0x104>)
 8004104:	410a      	asrs	r2, r1
 8004106:	07d6      	lsls	r6, r2, #31
 8004108:	d427      	bmi.n	800415a <__sflush_r+0xb2>
 800410a:	2200      	movs	r2, #0
 800410c:	6062      	str	r2, [r4, #4]
 800410e:	04d9      	lsls	r1, r3, #19
 8004110:	6922      	ldr	r2, [r4, #16]
 8004112:	6022      	str	r2, [r4, #0]
 8004114:	d504      	bpl.n	8004120 <__sflush_r+0x78>
 8004116:	1c42      	adds	r2, r0, #1
 8004118:	d101      	bne.n	800411e <__sflush_r+0x76>
 800411a:	682b      	ldr	r3, [r5, #0]
 800411c:	b903      	cbnz	r3, 8004120 <__sflush_r+0x78>
 800411e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004120:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004122:	602f      	str	r7, [r5, #0]
 8004124:	b1b9      	cbz	r1, 8004156 <__sflush_r+0xae>
 8004126:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800412a:	4299      	cmp	r1, r3
 800412c:	d002      	beq.n	8004134 <__sflush_r+0x8c>
 800412e:	4628      	mov	r0, r5
 8004130:	f7ff fbf2 	bl	8003918 <_free_r>
 8004134:	2300      	movs	r3, #0
 8004136:	6363      	str	r3, [r4, #52]	@ 0x34
 8004138:	e00d      	b.n	8004156 <__sflush_r+0xae>
 800413a:	2301      	movs	r3, #1
 800413c:	4628      	mov	r0, r5
 800413e:	47b0      	blx	r6
 8004140:	4602      	mov	r2, r0
 8004142:	1c50      	adds	r0, r2, #1
 8004144:	d1c9      	bne.n	80040da <__sflush_r+0x32>
 8004146:	682b      	ldr	r3, [r5, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0c6      	beq.n	80040da <__sflush_r+0x32>
 800414c:	2b1d      	cmp	r3, #29
 800414e:	d001      	beq.n	8004154 <__sflush_r+0xac>
 8004150:	2b16      	cmp	r3, #22
 8004152:	d11e      	bne.n	8004192 <__sflush_r+0xea>
 8004154:	602f      	str	r7, [r5, #0]
 8004156:	2000      	movs	r0, #0
 8004158:	e022      	b.n	80041a0 <__sflush_r+0xf8>
 800415a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800415e:	b21b      	sxth	r3, r3
 8004160:	e01b      	b.n	800419a <__sflush_r+0xf2>
 8004162:	690f      	ldr	r7, [r1, #16]
 8004164:	2f00      	cmp	r7, #0
 8004166:	d0f6      	beq.n	8004156 <__sflush_r+0xae>
 8004168:	0793      	lsls	r3, r2, #30
 800416a:	680e      	ldr	r6, [r1, #0]
 800416c:	bf08      	it	eq
 800416e:	694b      	ldreq	r3, [r1, #20]
 8004170:	600f      	str	r7, [r1, #0]
 8004172:	bf18      	it	ne
 8004174:	2300      	movne	r3, #0
 8004176:	eba6 0807 	sub.w	r8, r6, r7
 800417a:	608b      	str	r3, [r1, #8]
 800417c:	f1b8 0f00 	cmp.w	r8, #0
 8004180:	dde9      	ble.n	8004156 <__sflush_r+0xae>
 8004182:	6a21      	ldr	r1, [r4, #32]
 8004184:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004186:	4643      	mov	r3, r8
 8004188:	463a      	mov	r2, r7
 800418a:	4628      	mov	r0, r5
 800418c:	47b0      	blx	r6
 800418e:	2800      	cmp	r0, #0
 8004190:	dc08      	bgt.n	80041a4 <__sflush_r+0xfc>
 8004192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800419a:	81a3      	strh	r3, [r4, #12]
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041a4:	4407      	add	r7, r0
 80041a6:	eba8 0800 	sub.w	r8, r8, r0
 80041aa:	e7e7      	b.n	800417c <__sflush_r+0xd4>
 80041ac:	dfbffffe 	.word	0xdfbffffe

080041b0 <_fflush_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	690b      	ldr	r3, [r1, #16]
 80041b4:	4605      	mov	r5, r0
 80041b6:	460c      	mov	r4, r1
 80041b8:	b913      	cbnz	r3, 80041c0 <_fflush_r+0x10>
 80041ba:	2500      	movs	r5, #0
 80041bc:	4628      	mov	r0, r5
 80041be:	bd38      	pop	{r3, r4, r5, pc}
 80041c0:	b118      	cbz	r0, 80041ca <_fflush_r+0x1a>
 80041c2:	6a03      	ldr	r3, [r0, #32]
 80041c4:	b90b      	cbnz	r3, 80041ca <_fflush_r+0x1a>
 80041c6:	f7ff f9a5 	bl	8003514 <__sinit>
 80041ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f3      	beq.n	80041ba <_fflush_r+0xa>
 80041d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80041d4:	07d0      	lsls	r0, r2, #31
 80041d6:	d404      	bmi.n	80041e2 <_fflush_r+0x32>
 80041d8:	0599      	lsls	r1, r3, #22
 80041da:	d402      	bmi.n	80041e2 <_fflush_r+0x32>
 80041dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041de:	f7ff fb98 	bl	8003912 <__retarget_lock_acquire_recursive>
 80041e2:	4628      	mov	r0, r5
 80041e4:	4621      	mov	r1, r4
 80041e6:	f7ff ff5f 	bl	80040a8 <__sflush_r>
 80041ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041ec:	07da      	lsls	r2, r3, #31
 80041ee:	4605      	mov	r5, r0
 80041f0:	d4e4      	bmi.n	80041bc <_fflush_r+0xc>
 80041f2:	89a3      	ldrh	r3, [r4, #12]
 80041f4:	059b      	lsls	r3, r3, #22
 80041f6:	d4e1      	bmi.n	80041bc <_fflush_r+0xc>
 80041f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041fa:	f7ff fb8b 	bl	8003914 <__retarget_lock_release_recursive>
 80041fe:	e7dd      	b.n	80041bc <_fflush_r+0xc>

08004200 <__swhatbuf_r>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	460c      	mov	r4, r1
 8004204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004208:	2900      	cmp	r1, #0
 800420a:	b096      	sub	sp, #88	@ 0x58
 800420c:	4615      	mov	r5, r2
 800420e:	461e      	mov	r6, r3
 8004210:	da0d      	bge.n	800422e <__swhatbuf_r+0x2e>
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004218:	f04f 0100 	mov.w	r1, #0
 800421c:	bf14      	ite	ne
 800421e:	2340      	movne	r3, #64	@ 0x40
 8004220:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004224:	2000      	movs	r0, #0
 8004226:	6031      	str	r1, [r6, #0]
 8004228:	602b      	str	r3, [r5, #0]
 800422a:	b016      	add	sp, #88	@ 0x58
 800422c:	bd70      	pop	{r4, r5, r6, pc}
 800422e:	466a      	mov	r2, sp
 8004230:	f000 f87c 	bl	800432c <_fstat_r>
 8004234:	2800      	cmp	r0, #0
 8004236:	dbec      	blt.n	8004212 <__swhatbuf_r+0x12>
 8004238:	9901      	ldr	r1, [sp, #4]
 800423a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800423e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004242:	4259      	negs	r1, r3
 8004244:	4159      	adcs	r1, r3
 8004246:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800424a:	e7eb      	b.n	8004224 <__swhatbuf_r+0x24>

0800424c <__smakebuf_r>:
 800424c:	898b      	ldrh	r3, [r1, #12]
 800424e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004250:	079d      	lsls	r5, r3, #30
 8004252:	4606      	mov	r6, r0
 8004254:	460c      	mov	r4, r1
 8004256:	d507      	bpl.n	8004268 <__smakebuf_r+0x1c>
 8004258:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	6123      	str	r3, [r4, #16]
 8004260:	2301      	movs	r3, #1
 8004262:	6163      	str	r3, [r4, #20]
 8004264:	b003      	add	sp, #12
 8004266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004268:	ab01      	add	r3, sp, #4
 800426a:	466a      	mov	r2, sp
 800426c:	f7ff ffc8 	bl	8004200 <__swhatbuf_r>
 8004270:	9f00      	ldr	r7, [sp, #0]
 8004272:	4605      	mov	r5, r0
 8004274:	4639      	mov	r1, r7
 8004276:	4630      	mov	r0, r6
 8004278:	f7ff fbba 	bl	80039f0 <_malloc_r>
 800427c:	b948      	cbnz	r0, 8004292 <__smakebuf_r+0x46>
 800427e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004282:	059a      	lsls	r2, r3, #22
 8004284:	d4ee      	bmi.n	8004264 <__smakebuf_r+0x18>
 8004286:	f023 0303 	bic.w	r3, r3, #3
 800428a:	f043 0302 	orr.w	r3, r3, #2
 800428e:	81a3      	strh	r3, [r4, #12]
 8004290:	e7e2      	b.n	8004258 <__smakebuf_r+0xc>
 8004292:	89a3      	ldrh	r3, [r4, #12]
 8004294:	6020      	str	r0, [r4, #0]
 8004296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800429a:	81a3      	strh	r3, [r4, #12]
 800429c:	9b01      	ldr	r3, [sp, #4]
 800429e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80042a2:	b15b      	cbz	r3, 80042bc <__smakebuf_r+0x70>
 80042a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042a8:	4630      	mov	r0, r6
 80042aa:	f000 f851 	bl	8004350 <_isatty_r>
 80042ae:	b128      	cbz	r0, 80042bc <__smakebuf_r+0x70>
 80042b0:	89a3      	ldrh	r3, [r4, #12]
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	81a3      	strh	r3, [r4, #12]
 80042bc:	89a3      	ldrh	r3, [r4, #12]
 80042be:	431d      	orrs	r5, r3
 80042c0:	81a5      	strh	r5, [r4, #12]
 80042c2:	e7cf      	b.n	8004264 <__smakebuf_r+0x18>

080042c4 <_putc_r>:
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	460d      	mov	r5, r1
 80042c8:	4614      	mov	r4, r2
 80042ca:	4606      	mov	r6, r0
 80042cc:	b118      	cbz	r0, 80042d6 <_putc_r+0x12>
 80042ce:	6a03      	ldr	r3, [r0, #32]
 80042d0:	b90b      	cbnz	r3, 80042d6 <_putc_r+0x12>
 80042d2:	f7ff f91f 	bl	8003514 <__sinit>
 80042d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042d8:	07d8      	lsls	r0, r3, #31
 80042da:	d405      	bmi.n	80042e8 <_putc_r+0x24>
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	0599      	lsls	r1, r3, #22
 80042e0:	d402      	bmi.n	80042e8 <_putc_r+0x24>
 80042e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042e4:	f7ff fb15 	bl	8003912 <__retarget_lock_acquire_recursive>
 80042e8:	68a3      	ldr	r3, [r4, #8]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	60a3      	str	r3, [r4, #8]
 80042f0:	da05      	bge.n	80042fe <_putc_r+0x3a>
 80042f2:	69a2      	ldr	r2, [r4, #24]
 80042f4:	4293      	cmp	r3, r2
 80042f6:	db12      	blt.n	800431e <_putc_r+0x5a>
 80042f8:	b2eb      	uxtb	r3, r5
 80042fa:	2b0a      	cmp	r3, #10
 80042fc:	d00f      	beq.n	800431e <_putc_r+0x5a>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	6022      	str	r2, [r4, #0]
 8004304:	701d      	strb	r5, [r3, #0]
 8004306:	b2ed      	uxtb	r5, r5
 8004308:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800430a:	07da      	lsls	r2, r3, #31
 800430c:	d405      	bmi.n	800431a <_putc_r+0x56>
 800430e:	89a3      	ldrh	r3, [r4, #12]
 8004310:	059b      	lsls	r3, r3, #22
 8004312:	d402      	bmi.n	800431a <_putc_r+0x56>
 8004314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004316:	f7ff fafd 	bl	8003914 <__retarget_lock_release_recursive>
 800431a:	4628      	mov	r0, r5
 800431c:	bd70      	pop	{r4, r5, r6, pc}
 800431e:	4629      	mov	r1, r5
 8004320:	4622      	mov	r2, r4
 8004322:	4630      	mov	r0, r6
 8004324:	f7ff f9e7 	bl	80036f6 <__swbuf_r>
 8004328:	4605      	mov	r5, r0
 800432a:	e7ed      	b.n	8004308 <_putc_r+0x44>

0800432c <_fstat_r>:
 800432c:	b538      	push	{r3, r4, r5, lr}
 800432e:	4d07      	ldr	r5, [pc, #28]	@ (800434c <_fstat_r+0x20>)
 8004330:	2300      	movs	r3, #0
 8004332:	4604      	mov	r4, r0
 8004334:	4608      	mov	r0, r1
 8004336:	4611      	mov	r1, r2
 8004338:	602b      	str	r3, [r5, #0]
 800433a:	f7fc fda5 	bl	8000e88 <_fstat>
 800433e:	1c43      	adds	r3, r0, #1
 8004340:	d102      	bne.n	8004348 <_fstat_r+0x1c>
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	b103      	cbz	r3, 8004348 <_fstat_r+0x1c>
 8004346:	6023      	str	r3, [r4, #0]
 8004348:	bd38      	pop	{r3, r4, r5, pc}
 800434a:	bf00      	nop
 800434c:	20000360 	.word	0x20000360

08004350 <_isatty_r>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	4d06      	ldr	r5, [pc, #24]	@ (800436c <_isatty_r+0x1c>)
 8004354:	2300      	movs	r3, #0
 8004356:	4604      	mov	r4, r0
 8004358:	4608      	mov	r0, r1
 800435a:	602b      	str	r3, [r5, #0]
 800435c:	f7fc fda4 	bl	8000ea8 <_isatty>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d102      	bne.n	800436a <_isatty_r+0x1a>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	b103      	cbz	r3, 800436a <_isatty_r+0x1a>
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	bd38      	pop	{r3, r4, r5, pc}
 800436c:	20000360 	.word	0x20000360

08004370 <_sbrk_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4d06      	ldr	r5, [pc, #24]	@ (800438c <_sbrk_r+0x1c>)
 8004374:	2300      	movs	r3, #0
 8004376:	4604      	mov	r4, r0
 8004378:	4608      	mov	r0, r1
 800437a:	602b      	str	r3, [r5, #0]
 800437c:	f7fc fdac 	bl	8000ed8 <_sbrk>
 8004380:	1c43      	adds	r3, r0, #1
 8004382:	d102      	bne.n	800438a <_sbrk_r+0x1a>
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	b103      	cbz	r3, 800438a <_sbrk_r+0x1a>
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	bd38      	pop	{r3, r4, r5, pc}
 800438c:	20000360 	.word	0x20000360

08004390 <_init>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	bf00      	nop
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr

0800439c <_fini>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	bf00      	nop
 80043a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a2:	bc08      	pop	{r3}
 80043a4:	469e      	mov	lr, r3
 80043a6:	4770      	bx	lr
